<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover">
  <title>SunTrack AR ‚Ä¢ Suncalc.js</title>
  <style>
    html, body {
      margin: 0; padding: 0;
      width: 100%; height: 100%;
      padding-top: env(safe-area-inset-top);
      padding-bottom: env(safe-area-inset-bottom);
      overflow: hidden; background: #000; color: #fff;
      font-family: system-ui, sans-serif;
    }
    video#vid, canvas#cv {
      position: absolute; top: 0; left: 0;
      width: 100%; height: 100%; object-fit: cover;
    }
    video#vid { z-index: 0; }
    canvas#cv { z-index: 1; }
    pre#debug {
      position: fixed; top: env(safe-area-inset-top); left: 0; right: 0;
      height: 140px; margin: 0; padding: 6px;
      background: rgba(0,0,0,0.8); color: #0f8;
      font-family: monospace; font-size: 12px;
      overflow-y: auto; z-index: 3;
    }
    #controls {
      position: fixed; bottom: env(safe-area-inset-bottom); left: 0; right: 0;
      display: flex; gap: 6px; padding: 8px;
      background: rgba(0,0,0,0.7); z-index: 3;
    }
    #controls button {
      flex: 1; padding: 10px; font-size: 14px;
      background: #222; color: #fff; border: none; border-radius: 4px;
      cursor: pointer;
    }
    #controls button:disabled { opacity: 0.4; }
  </style>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/suncalc/1.9.0/suncalc.min.js"></script>
</head>
<body>
  <video id="vid" playsinline autoplay muted></video>
  <canvas id="cv"></canvas>
  <pre id="debug">[ready]\n</pre>
  <div id="controls">
    <button id="btnCam">Start Camera</button>
    <button id="btnGeo" disabled>Get Location</button>
    <button id="btnGyro" disabled>Enable Motion</button>
    <button id="btnAR" disabled>Start AR</button>
    <button id="btnCopy">Copy Logs</button>
  </div>

  <script>
    const vid = document.getElementById('vid');
    const cv  = document.getElementById('cv');
    const logEl = document.getElementById('debug');
    let stream, lat, lng, heading, pitch;
    let sunPath = [], ctx2d;

    function log(...args) {
      logEl.textContent += args.join(' ') + '\n';
      logEl.scrollTop = logEl.scrollHeight;
    }

    // 1) CAMERA
    document.getElementById('btnCam').onclick = async () => {
      try {
        stream = await navigator.mediaDevices.getUserMedia({
          video: { facingMode: 'environment' }, audio: false
        });
        vid.srcObject = stream;
        log('‚úÖ Camera OK');
        document.getElementById('btnGeo').disabled = false;
      } catch (e) {
        log('‚ùå Camera ERR', e.name, e.message);
      }
    };

    // 2) GEOLOCATION
    document.getElementById('btnGeo').onclick = () => {
      if (!navigator.geolocation) return log('‚ùå No geolocation API');
      navigator.geolocation.getCurrentPosition(pos => {
        lat = pos.coords.latitude; lng = pos.coords.longitude;
        log('‚úÖ Geo OK', lat.toFixed(6), lng.toFixed(6));
        document.getElementById('btnGyro').disabled = false;
      }, err => {
        log('‚ùå Geo ERR', err.code, err.message);
      }, { enableHighAccuracy: true, timeout: 10000 });
    };

    // 3) DEVICE ORIENTATION
    function handleOri(e) {
      heading = e.webkitCompassHeading != null
        ? e.webkitCompassHeading
        : 360 - e.alpha;
      pitch = e.beta;
      log('‚Üª Motion', heading.toFixed(1)+'¬∞', pitch.toFixed(1)+'¬∞');
    }
    document.getElementById('btnGyro').onclick = () => {
      if (typeof DeviceOrientationEvent.requestPermission === 'function') {
        DeviceOrientationEvent.requestPermission()
          .then(state => {
            if (state === 'granted') {
              window.addEventListener('deviceorientation', handleOri);
              log('‚úÖ Gyro OK');
              document.getElementById('btnAR').disabled = false;
            } else log('‚ùå Gyro DENIED');
          })
          .catch(err => log('‚ùå Gyro ERR', err));
      } else {
        window.addEventListener('deviceorientation', handleOri);
        log('‚úÖ Gyro OK (no prompt)');
        document.getElementById('btnAR').disabled = false;
      }
    };

    // Compute sun path using Suncalc
    function calculateSunPath() {
      sunPath = [];
      const now = new Date();
      for (let i = 0; i < 96; i++) {
        const t = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        t.setMinutes(i*15);
        const pos = SunCalc.getPosition(t, lat, lng);
        // SunCalc altitude in rad, convert to degrees
        sunPath.push({
          azimuth: (pos.azimuth * toDeg + 360) % 360,
          altitude: pos.altitude * toDeg
        });
      }
      log(`üéØ Sun path: ${sunPath.length} points`);
    }

    // AR overlay draw
    function drawAR() {
      ctx2d.clearRect(0, 0, cv.width, cv.height);
      const hFOV = 60, vFOV = 45;

      // Horizon line (altitude=0)
      const relAlt0 = 0 - pitch;
      const y0 = (0.5 - relAlt0 / vFOV) * cv.height;
      ctx2d.strokeStyle = 'white'; ctx2d.lineWidth = 2;
      ctx2d.beginPath(); ctx2d.moveTo(0, y0); ctx2d.lineTo(cv.width, y0); ctx2d.stroke();

      // Sun path arc
      ctx2d.strokeStyle = 'yellow'; ctx2d.lineWidth = 2; ctx2d.beginPath();
      sunPath.forEach((pt, i) => {
        let relAz = pt.azimuth - heading;
        if (relAz > 180) relAz -= 360;
        if (relAz < -180) relAz += 360;
        let relAlt = pt.altitude - pitch;
        // only plot within FOV
        if (Math.abs(relAz) <= hFOV/2 && Math.abs(relAlt) <= vFOV/2) {
          const x = (0.5 + relAz / hFOV) * cv.width;
          const y = (0.5 - relAlt / vFOV) * cv.height;
          i === 0 ? ctx2d.moveTo(x, y) : ctx2d.lineTo(x, y);
        }
      });
      ctx2d.stroke();

      // Current sun icon
      const nowPos = SunCalc.getPosition(new Date(), lat, lng);
      let curAz = (nowPos.azimuth * toDeg + 360) % 360;
      let curAlt = nowPos.altitude * toDeg;
      let relAz = curAz - heading;
      if (relAz > 180) relAz -= 360;
      if (relAz < -180) relAz += 360;
      let relAlt = curAlt - pitch;
      const sunX = (0.5 + relAz / hFOV) * cv.width;
      const sunY = (0.5 - relAlt / vFOV) * cv.height;
      ctx2d.fillStyle = 'orange';
      ctx2d.beginPath(); ctx2d.arc(sunX, sunY, 12, 0, 2*Math.PI); ctx2d.fill();
      ctx2d.fillStyle = 'white';
      ctx2d.textAlign = 'center'; ctx2d.fillText('‚òÄÔ∏è', sunX, sunY + 4);

      requestAnimationFrame(drawAR);
    }

    // 4) START AR
    document.getElementById('btnAR').onclick = () => {
      const ok = !!stream && lat!=null && heading!=null;
      log(ok ? 'üéâ All set ‚Äî starting AR!' : '‚ùå Missing prerequisites');
      if (!ok) return;
      cv.width  = window.innerWidth;
      cv.height = window.innerHeight;
      ctx2d = cv.getContext('2d');
      calculateSunPath();
      drawAR();
    };

    // COPY LOGS
    document.getElementById('btnCopy').onclick = async () => {
      try {
        await navigator.clipboard.writeText(logEl.textContent);
        log('üìã Logs copied');
      } catch(e) {
        log('‚ùå Copy failed', e);
      }
    };
  </script>
</body>
</html>
