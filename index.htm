<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no,viewport-fit=cover" />
  <title>SunTrack AR • iPhone 15</title>

  <!-- Tailwind for UI -->
  <script src="https://cdn.tailwindcss.com"></script>
  <link
    href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&family=Inter:wght@400;600&display=swap"
    rel="stylesheet"
  />

  <style>
    /* Utility */
    .hidden { display: none !important; }

    /* Base styles */
    body {
      margin: 0;
      padding: 0;
      font-family: 'Inter', sans-serif;
      background: #1f2937;
      color: #d1d5db;
      overflow: hidden;
      height: 100vh;
    }
    #ar-view {
      position: relative;
      width: 100%;
      height: 100%;
    }

    /* Video & Canvas */
    #videoElement,
    #canvasElement {
      position: absolute;
      top: 50%; left: 50%;
      transform: translate(-50%, -50%);
      object-fit: cover;
      width: 100%;
      height: 100%;
      z-index: 1;
    }
    #canvasElement { z-index: 2; pointer-events: none; }

    /* Permissions overlay */
    #permission-buttons {
      position: absolute;
      top: 50%; left: 50%;
      transform: translate(-50%, -50%) scale(0.9);
      width: 80%; max-width: 400px;
      background: rgba(0,0,0,0.7);
      backdrop-filter: blur(5px);
      padding: 1.5rem;
      border-radius: 1rem;
      text-align: center;
      z-index: 10;
      opacity: 0;
      pointer-events: none;
      transition: transform .3s ease, opacity .3s ease;
    }
    #permission-buttons.active {
      opacity: 1;
      pointer-events: auto;
      transform: translate(-50%, -50%) scale(1);
    }

    /* Loading message */
    #loading-message {
      position: absolute;
      top: 50%; left: 50%;
      transform: translate(-50%, -50%);
      color: #fff;
      font-size: 1.25rem;
      text-shadow: 1px 1px 2px #000;
      z-index: 11;
    }

    /* Control bar */
    .control-bar {
      position: absolute;
      bottom: 0; left: 0; right: 0;
      padding: 1rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: linear-gradient(to top, rgba(0,0,0,0.8), rgba(0,0,0,0.2));
      z-index: 9;
    }
    .control-bar button,
    .control-bar select {
      font-size: .9rem;
      padding: .6rem 1rem;
      border: none;
      border-radius: .5rem;
      background: #111;
      color: #fafafa;
      cursor: pointer;
    }
    .control-bar button.toggle.on { background: #0af; }
    .control-bar button.toggle.off { background: #444; }
    .control-bar input[type="range"] {
      width: 100px;
    }

    /* Record button */
    #recBtn {
      width: 64px; height: 64px;
      border-radius: 50%;
      background: #e33;
      display: flex; align-items: center; justify-content: center;
      cursor: pointer;
      position: relative;
    }
    #recBtn.recording {
      background: #0af;
      animation: pulse 1.2s infinite;
    }
    @keyframes pulse {
      0% { box-shadow: 0 0 0 0 rgba(10,160,255, .6); }
      70% { box-shadow: 0 0 0 20px rgba(10,160,255, 0); }
      100% { box-shadow: 0 0 0 0 rgba(10,160,255, 0); }
    }
    #recIcon, #stopIcon {
      font-size: 1.5rem;
      color: #fff;
      pointer-events: none;
    }
    #stopIcon { display: none; }

    /* Timer */
    .timer {
      font-variant-numeric: tabular-nums;
      font-size: 1rem;
      color: #fafafa;
    }

    /* Debug */
    .debug-container {
      position: absolute;
      bottom: 0; left: 0;
      width: 100%; max-height: 40vh;
      background: rgba(0,0,0,0.7);
      color: #8cf;
      font-size: .75rem;
      padding: 1rem;
      overflow: auto;
      z-index: 10000;
      border-top-left-radius: 1rem;
      border-top-right-radius: 1rem;
      display: none;
    }
    #toggle-debug-btn {
      position: absolute;
      bottom: 40vh; right: 1rem;
      z-index: 10001;
      background: rgba(0,0,0,0.7);
      color: #8cf;
      padding: .5rem;
      font-size: .75rem;
      border-radius: .5rem .5rem 0 0;
      border: none;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div id="ar-view">
    <video id="videoElement" playsinline autoplay muted></video>
    <canvas id="canvasElement"></canvas>

    <div id="permission-buttons">
      <h1 id="app-name" class="text-3xl font-bold mb-2">SunTrack AR</h1>
      <p id="status-message" class="text-gray-400 mb-6">Let's get started by getting your location.</p>
      <button id="main-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg shadow-md transition-colors">
        Get Location
      </button>
    </div>

    <div id="loading-message" class="hidden">Calculating sun path…</div>

    <div id="messageBox" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center p-4 z-50">
      <div class="bg-white rounded-lg shadow-lg p-6 max-w-sm w-full text-center">
        <p id="messageText" class="text-gray-800 text-lg"></p>
        <button id="closeMessageButton" class="mt-4 px-4 py-2 bg-blue-600 text-white rounded">Close</button>
      </div>
    </div>

    <div class="control-bar hidden" id="controls">
      <div class="flex items-center gap-2">
        <select id="res">
          <option value="1280x720">720p</option>
          <option value="1920x1080" selected>1080p</option>
          <option value="3840x2160">4K</option>
        </select>
        <select id="fpsSel">
          <option value="24">24fps</option>
          <option value="30" selected>30fps</option>
          <option value="60">60fps</option>
        </select>
        <button id="logBtn" class="toggle on">Log ON</button>
        <input type="range" id="zoom" min="1" max="6" step="0.1" value="1">
      </div>
      <div class="flex items-center gap-4">
        <div id="recBtn"><span id="recIcon">●</span><span id="stopIcon">■</span></div>
        <div class="timer" id="timer">00:00</div>
      </div>
    </div>

    <div class="debug-container" id="debug-box"></div>
    <button id="toggle-debug-btn"><span id="debug-arrow">▼</span> Debug</button>
  </div>

  <script>
  // —— Constants & Helpers ——
  const rad = Math.PI/180, toDeg = 180/Math.PI;
  function toDays(date){ return date.getTime()/86400000 - 0.5 + 2440588 - 2451545; }
  function getSunPosition(date, lat, lng){
    const lw = rad * -lng, phi = rad * lat, d = toDays(date);
    const M = rad*(357.5291 + 0.98560028*d);
    const C = rad*(1.9148*Math.sin(M) + .02*Math.sin(2*M) + .0003*Math.sin(3*M));
    const L = M + C + rad*280.4665;
    const dec = Math.asin(Math.sin(rad*23.44)*Math.sin(L));
    const ra  = Math.atan2(Math.cos(rad*23.44)*Math.sin(L), Math.cos(L));
    const J   = date.getTime()/86400000 + 2440587.5;
    const gst = (J-2451545.0)*0.985647362 + 280.460618;
    const ha  = rad*(gst + lng) - ra;
    const alt = Math.asin(Math.sin(phi)*Math.sin(dec) + Math.cos(phi)*Math.cos(dec)*Math.cos(ha));
    const az  = Math.atan2(Math.sin(ha),
                           Math.cos(ha)*Math.sin(phi) - Math.tan(dec)*Math.cos(phi));
    return {
      azimuth: (az*toDeg + 360) % 360,
      altitude: alt*toDeg
    };
  }

  window.onload = function(){
    // —— DOM refs ——
    const videoEl = document.getElementById('videoElement');
    const canvasEl = document.getElementById('canvasElement');
    const permBox  = document.getElementById('permission-buttons');
    const status   = document.getElementById('status-message');
    const mainBtn  = document.getElementById('main-btn');
    const loadMsg  = document.getElementById('loading-message');
    const msgBox   = document.getElementById('messageBox');
    const msgText  = document.getElementById('messageText');
    const closeBtn = document.getElementById('closeMessageButton');
    const ctrls    = document.getElementById('controls');
    const resSel   = document.getElementById('res');
    const fpsSel   = document.getElementById('fpsSel');
    const logBtn   = document.getElementById('logBtn');
    const zoomSl   = document.getElementById('zoom');
    const recBtn   = document.getElementById('recBtn');
    const recIc    = document.getElementById('recIcon');
    const stopIc   = document.getElementById('stopIcon');
    const timerEl  = document.getElementById('timer');
    const dbgBox   = document.getElementById('debug-box');
    const dbgBtn   = document.getElementById('toggle-debug-btn');
    const dbgArr   = document.getElementById('debug-arrow');

    // —— Debug logger ——
    const log = (...a)=>{ dbgBox.textContent += a.join(' ') + '\n'; dbgBox.scrollTop = dbgBox.scrollHeight; };

    dbgBtn.onclick = ()=>{
      const showing = dbgBox.style.display === 'block';
      dbgBox.style.display = showing ? 'none' : 'block';
      dbgArr.textContent = showing ? '▼' : '▲';
    };

    // —— State —— 
    let latitude=null, longitude=null;
    let rawHeading=0, rawPitch=0;
    let baseHeading=null, basePitch=null;
    let smoothHeading=0, smoothPitch=0;
    const smoothing = 0.2;
    let hasDeviceMotion=false;
    let sunPathPoints=[];
    let animationFrameId;
    let stream, track;
    let recorder, chunks=[], timerInt, startTs;
    let applyLog = true;
    let gl, prog, tex, ctx2d;

    // —— UI State transitions ——
    function updateUI(step){
      log(`[UI] -> ${step}`);
      if(step==='location'){
        permBox.classList.add('active');
        status.textContent = 'Camera ready. Now allow location.';
        mainBtn.textContent = 'Get Location';
        mainBtn.onclick = requestGeolocation;
      }
      if(step==='gyro'){
        status.textContent = 'Location OK. Next: enable device motion.';
        mainBtn.textContent = 'Enable Device Motion';
        mainBtn.onclick = requestGyroscope;
      }
      if(step==='ar'){
        permBox.classList.remove('active');
        ctrls.classList.remove('hidden');
        startArLoop();
      }
    }

    // —— Message Box ——
    function showMessage(msg){
      msgText.textContent = msg;
      msgBox.classList.remove('hidden');
      closeBtn.onclick = ()=> msgBox.classList.add('hidden');
    }

    // —— 1) Camera ——
    async function requestCamera(){
      log('[Action] Camera…');
      try {
        const [w,h] = resSel.value.split('x').map(Number);
        stream = await navigator.mediaDevices.getUserMedia({
          video:{ facingMode:'environment', width:{ideal:w},height:{ideal:h},frameRate:{ideal:+fpsSel.value,max:+fpsSel.value} },
          audio:false
        });
        track = stream.getVideoTracks()[0];
        videoEl.srcObject = stream; await videoEl.play();
        canvasEl.width  = videoEl.videoWidth  || window.innerWidth;
        canvasEl.height = videoEl.videoHeight || window.innerHeight;
        log('✅ Camera OK', canvasEl.width, canvasEl.height);
        updateUI('location');
      } catch(err){
        log('❌ Camera err', err.name, err.message);
        showMessage('Camera access denied.');
      }
    }

    // —— 2) Geolocation ——
    function requestGeolocation(){
      log('[Action] Geolocation…');
      navigator.geolocation.getCurrentPosition(pos=>{
        latitude = pos.coords.latitude;
        longitude= pos.coords.longitude;
        log('✅ Geolocation', latitude, longitude);
        updateUI('gyro');
      }, err=>{
        log('❌ Geo err', err.code, err.message);
        showMessage('Location denied or unavailable.');
      },{enableHighAccuracy:true,timeout:10000,maximumAge:0});
    }

    // —— 3) Gyroscope ——
    function handleOrientation(e){
      const heading = e.webkitCompassHeading!=null
        ? e.webkitCompassHeading
        : (360 - e.alpha);
      const pitch = e.beta;
      if(baseHeading===null) baseHeading=heading;
      if(basePitch  ===null) basePitch  =pitch;
      rawHeading = ((heading - baseHeading + 540)%360)-180;
      rawPitch   = pitch - basePitch;
      hasDeviceMotion=true;
      smoothHeading = smoothHeading===0
        ? rawHeading
        : smoothHeading*(1-smoothing) + rawHeading*smoothing;
      smoothPitch   = smoothPitch===0
        ? rawPitch
        : smoothPitch*(1-smoothing)   + rawPitch*smoothing;
    }

    function requestGyroscope(){
      log('[Action] Gyro…');
      if(window.DeviceOrientationEvent && typeof DeviceOrientationEvent.requestPermission==='function'){
        DeviceOrientationEvent.requestPermission()
          .then(state=>{
            if(state==='granted'){
              window.addEventListener('deviceorientation',handleOrientation);
              log('✅ Gyro granted');
              updateUI('ar');
            } else {
              log('❌ Gyro denied');
              showMessage('Device motion permission denied.');
            }
          })
          .catch(err=>{ log('❌ Gyro err',err); showMessage('Gyro error.'); });
      } else {
        window.addEventListener('deviceorientation',handleOrientation);
        log('✅ Gyro no-prompt');
        updateUI('ar');
      }
    }

    // —— 4) Sun path ——
    function calculateSunPath(){
      log('[SunPath] Calc…');
      sunPathPoints = [];
      if(latitude===null){
        showMessage('No location.');
        return;
      }
      const now = new Date();
      for(let i=0;i<96;i++){
        const t = new Date(now.getFullYear(),now.getMonth(),now.getDate());
        t.setMinutes(i*15);
        sunPathPoints.push(getSunPosition(t,latitude,longitude));
      }
      log('[SunPath] Done', sunPathPoints.length);
    }

    // —— 5) WebGL shader init ——
    function initGL(){
      if(gl) return;
      gl = canvasEl.parentElement.appendChild(document.createElement('canvas'))
             .getContext('webgl2',{premultipliedAlpha:false});
      gl.canvas.style.cssText = 'position:absolute;top:0;left:0;width:100%;height:100%;z-index:2';
      gl.canvas.width  = canvasEl.width;
      gl.canvas.height = canvasEl.height;

      const vs = `#version 300 es
        in vec2 p; out vec2 uv;
        void main(){ uv=(p+1.)*.5; gl_Position=vec4(p,0,1); }`;
      const fs = `#version 300 es
        precision highp float; in vec2 uv; out vec4 o;
        uniform sampler2D t; uniform bool uLog;
        vec3 lin(vec3 v){ return pow(max(v,vec3(0.0)),vec3(2.2)); }
        vec3 slog(vec3 l){
          const float cut=0.01125,b=0.432699,c=0.616596,d=0.03;
          return clamp(mix(log10(l*0.01+1.)*b+c,l*12.0+d,step(l,vec3(cut))),0.0,1.0);
        }
        void main(){
          vec3 c = texture(t,uv).rgb;
          c = uLog ? slog(lin(c)) : c;
          o = vec4(c,1);
        }`;

      function compile(src,type){
        const s=gl.createShader(type);
        gl.shaderSource(s,src);
        gl.compileShader(s);
        if(!gl.getShaderParameter(s,gl.COMPILE_STATUS))
          throw gl.getShaderInfoLog(s);
        return s;
      }

      prog = gl.createProgram();
      gl.attachShader(prog,compile(vs,gl.VERTEX_SHADER));
      gl.attachShader(prog,compile(fs,gl.FRAGMENT_SHADER));
      gl.linkProgram(prog);
      gl.useProgram(prog);

      const pos = new Float32Array([-1,-1,1,-1,-1,1,1,1]);
      const buf = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER,buf);
      gl.bufferData(gl.ARRAY_BUFFER,pos,gl.STATIC_DRAW);
      const loc = gl.getAttribLocation(prog,'p');
      gl.enableVertexAttribArray(loc);
      gl.vertexAttribPointer(loc,2,gl.FLOAT,false,0,0);

      tex = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D,tex);
      gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
    }

    // —— AR render loop ——
    function drawArOverlay(){
      if(!gl) return;
      gl.bindTexture(gl.TEXTURE_2D,tex);
      gl.texImage2D(gl.TEXTURE_2D,0,gl.RGB,gl.RGB,gl.UNSIGNED_BYTE,videoEl);
      gl.uniform1i(gl.getUniformLocation(prog,'uLog'),applyLog?1:0);
      gl.drawArrays(gl.TRIANGLE_STRIP,0,4);

      // draw 2D overlays on canvasEl
      ctx2d.clearRect(0,0,canvasEl.width,canvasEl.height);
      const H=smoothHeading, P=smoothPitch;
      const halfH=30, halfV=22.5; // degrees
      // horizon
      const horizonY = (-0 - P + halfV)/(halfV*2)*canvasEl.height;
      ctx2d.strokeStyle='white'; ctx2d.lineWidth=2;
      ctx2d.beginPath();
      ctx2d.moveTo(0,horizonY);
      ctx2d.lineTo(canvasEl.width,horizonY);
      ctx2d.stroke();

      // sun path arc
      ctx2d.strokeStyle='yellow'; ctx2d.lineWidth=3; ctx2d.beginPath();
      sunPathPoints.forEach((pt,i)=>{
        let relAz=pt.azimuth - H;
        if(relAz>180) relAz-=360;
        if(relAz<-180) relAz+=360;
        let relAlt=pt.altitude - P;
        if(Math.abs(relAz)<=halfH*2 && Math.abs(relAlt)<=halfV*2){
          const x=(relAz+halfH)/(halfH*2)*canvasEl.width;
          const y=(-relAlt+halfV)/(halfV*2)*canvasEl.height;
          i===0?ctx2d.moveTo(x,y):ctx2d.lineTo(x,y);
        }
      });
      ctx2d.stroke();

      // current sun
      const now = getSunPosition(new Date(),latitude,longitude);
      let rAz = now.azimuth - H; if(rAz>180) rAz-=360; if(rAz<-180) rAz+=360;
      let rAlt= now.altitude - P;
      let sunX = (rAz+halfH)/(halfH*2)*canvasEl.width;
      let sunY = (-rAlt+halfV)/(halfV*2)*canvasEl.height;
      ctx2d.fillStyle='orange'; ctx2d.beginPath();
      ctx2d.arc(sunX,sunY,12,0,2*Math.PI); ctx2d.fill();
      ctx2d.fillStyle='white'; ctx2d.textAlign='center'; ctx2d.fillText('☀️',sunX,sunY+4);

      animationFrameId = requestAnimationFrame(drawArOverlay);
    }

    function startArLoop(){
      baseHeading = basePitch = null;
      smoothHeading = smoothPitch = 0;
      hasDeviceMotion = false;
      calculateSunPath();
      ctx2d = canvasEl.getContext('2d');
      drawArOverlay();
    }

    // —— Recording & controls —— (unchanged from prior)
    logBtn.onclick = ()=>applyLog=!applyLog;

    zoomSl.oninput = ()=>{
      if(track && 'zoom' in track.getCapabilities()){
        track.applyConstraints({advanced:[{zoom: parseFloat(zoomSl.value)}]})
          .catch(()=>{});
      }
    };

    recBtn.onclick = ()=>{
      if(!stream) return showMessage('Init AR first');
      if(recorder && recorder.state==='recording'){ 
        recorder.stop(); 
        clearInterval(timerInt);
        timerEl.textContent = '00:00';
        recBtn.classList.remove('recording');
        recIc.style.display = 'block'; stopIc.style.display='none';
      } else {
        const mime = MediaRecorder.isTypeSupported('video/mp4;codecs=avc1')
                   ? 'video/mp4;codecs=avc1' : 'video/webm';
        recorder = new MediaRecorder(canvasEl.captureStream(+fpsSel.value),{mimeType:mime});
        chunks=[];
        recorder.ondataavailable = e=>chunks.push(e.data);
        recorder.onstop = ()=>{
          const blob = new Blob(chunks,{type:recorder.mimeType});
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href=url; a.download=`SunTrack_${Date.now()}.${mime.includes('mp4')?'mp4':'webm'}`;
          document.body.appendChild(a); a.click(); a.remove();
          setTimeout(()=>URL.revokeObjectURL(url),2000);
        };
        recorder.start();
        recBtn.classList.add('recording');
        recIc.style.display='none'; stopIc.style.display='block';
        startTs = Date.now();
        timerInt = setInterval(()=>{
          const s = Math.floor((Date.now()-startTs)/1000);
          timerEl.textContent = `${String(Math.floor(s/60)).padStart(2,'0')}:${String(s%60).padStart(2,'0')}`;
        },500);
      }
    };

    // —— Initialization ——
    document.addEventListener('DOMContentLoaded', requestCamera);
  };
  </script>
</body>
</html>
