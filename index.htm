<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover" />
<title>SunTrack AR ‚Ä¢ Full Sunpath</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/suncalc/1.9.0/suncalc.min.js"></script>
<style>
  :root{
    --glass: rgba(18,18,18,.58);
    --gold:  rgba(255,215,0,.98);
    --gold2: rgba(255,180,0,.95);
    --night: rgba(200,200,200,.38);
    --ink:   rgba(255,255,255,.92);
    --muted: rgba(255,255,255,.65);
    --edge:  rgba(0,0,0,.55);
  }
  html,body{margin:0;height:100%;background:#000;color:#fff;font:14px/1.45 Inter,system-ui,-apple-system,Segoe UI,Roboto,sans-serif;overflow:hidden}
  video,canvas{position:absolute;inset:0;width:100%;height:100%;object-fit:cover}
  video{z-index:0} canvas{z-index:1}

  /* Top status + compass */
  #topbar{
    position:fixed; left:12px; right:12px; top:calc(env(safe-area-inset-top) + 10px);
    display:flex; align-items:center; gap:8px; z-index:3;
  }
  .pill{
    background:var(--glass); backdrop-filter:saturate(140%) blur(6px);
    border:1px solid rgba(255,255,255,.08); border-radius:12px;
    padding:8px 12px; font-weight:600; box-shadow:0 4px 18px rgba(0,0,0,.35);
    white-space:nowrap;
  }
  #status{flex:1; text-align:center}
  #compass{display:flex; gap:10px; align-items:center}
  #compass .rose{width:34px;height:34px;border-radius:50%;position:relative;background:rgba(255,255,255,.05);border:1px solid rgba(255,255,255,.08)}
  #compass .needle{position:absolute;left:50%;top:50%;width:2px;height:70%;background:var(--gold);transform-origin:50% 85%;border-radius:2px;box-shadow:0 0 12px var(--gold2)}
  #compass .txt{font-size:12px;color:var(--muted);min-width:64px;text-align:right}

  /* Controls */
  #controls{
    position:fixed; left:12px; right:12px; bottom:calc(env(safe-area-inset-bottom) + 132px);
    display:flex; gap:8px; z-index:3; background:var(--glass); border:1px solid rgba(255,255,255,.08);
    padding:10px; border-radius:12px; backdrop-filter:saturate(140%) blur(6px); box-shadow:0 8px 24px rgba(0,0,0,.45);
  }
  #controls button{
    appearance:none;border:0;border-radius:10px;padding:10px 12px;background:#1e1e1e;color:#fff;
    font-weight:600;letter-spacing:.2px
  }
  #controls button.primary{background:#2b5cff}
  #controls button:disabled{opacity:.45}

  /* Brand */
  #brand{position:fixed;left:16px;bottom:calc(env(safe-area-inset-bottom) + 100px);color:#c9c9c9;font-size:11px;opacity:.85;z-index:3;text-shadow:0 1px 10px rgba(0,0,0,.6)}

  /* Debug (collapsible) */
  #debugWrap{
    position:fixed; left:0; right:0; bottom:0; z-index:2;
    background:rgba(0,0,0,.84); border-top:1px solid rgba(255,255,255,.06);
  }
  #debugBar{
    display:flex; align-items:center; justify-content:space-between; padding:6px 10px; color:#8cf; font:12px/1.25 ui-monospace,Menlo,Consolas,monospace;
  }
  #debug{max-height:0; overflow:auto; margin:0; padding:0 10px 8px 10px; color:#8cf; font:12px/1.25 ui-monospace,Menlo,Consolas,monospace; white-space:pre; transition:max-height .25s ease}
  #debug.open{max-height:120px}
  #toggleDbg{background:transparent;border:0;color:#8cf;font-weight:700}
</style>
</head>
<body>
  <video id="vid" playsinline autoplay muted></video>
  <canvas id="cv"></canvas>

  <div id="topbar">
    <div id="compass" class="pill">
      <div class="rose"><div class="needle" id="needle"></div></div>
      <div class="txt" id="hdgTxt">H: ‚Äî¬∞</div>
    </div>
    <div id="status" class="pill">Ready</div>
  </div>

  <div id="brand">o4-mini-high ‚Ä¢ made with GPT-5</div>

  <div id="controls">
    <button id="bCam" class="primary">Start Camera</button>
    <button id="bGeo" disabled>Get Location</button>
    <button id="bGyro" disabled>Enable Motion</button>
    <button id="bAR" disabled>Start AR</button>
    <button id="bCopy">Copy Logs</button>
  </div>

  <div id="debugWrap">
    <div id="debugBar">
      <strong>Debug</strong>
      <button id="toggleDbg">‚ñ≤</button>
    </div>
    <pre id="debug">[ready]
</pre>
  </div>

<script>
/* ---------- DOM & logging ---------- */
const $ = id => document.getElementById(id);
const vid=$('vid'), cv=$('cv'), ctx=cv.getContext('2d');
const statusEl=$('status'), dbg=$('debug'), toggleDbg=$('toggleDbg');
const needle=$('needle'), hdgTxt=$('hdgTxt');
const log=(...a)=>{ dbg.textContent+=a.join(' ')+'\n'; dbg.scrollTop=dbg.scrollHeight; };

/* ---------- State ---------- */
let stream;
let lat=null, lng=null;
let rawH=0, rawP=0, rawR=0;
let smoothH=0, smoothP=0, smoothR=0;
const SMOOTH=0.12;

const HFOV=65;  // iPhone 15 wide-ish. Adjust if you're on ultra-wide (‚âà120) or 2x (‚âà34).
let vFOV=45;    // computed from aspect at runtime

let path=[];    // full 24h [{t, azN, azU, alt}]
let raf=null, arActive=false;

let pitchZero=0;  // auto-levelling baseline captured at AR start

/* ---------- Utils ---------- */
const rad2deg=r=>r*180/Math.PI, deg2rad=d=>d*Math.PI/180;
function computeVFOV(){
  const w=cv.width||innerWidth, h=cv.height||innerHeight;
  vFOV = 2*Math.atan(Math.tan(deg2rad(HFOV/2))*(h/w))*180/Math.PI;
}
function sunAzFromNorthCW(azRad){ return (rad2deg(azRad)+180+360)%360; } // SunCalc ‚Üí N-CW
function unwrap(seq){
  if(!seq.length) return [];
  const out=[seq[0]];
  for(let i=1;i<seq.length;i++){
    let a=seq[i], p=out[i-1];
    while(a-p>180) a-=360;
    while(a-p<-180) a+=360;
    out.push(a);
  }
  return out;
}
function shortestDelta(a,b){ return ((a-b+540)%360)-180; } // [-180,180)
function clamp(v,min,max){ return Math.max(min, Math.min(max,v)); }

/* ---------- Camera ---------- */
$('bCam').onclick = async () => {
  try{
    statusEl.textContent='Opening camera‚Ä¶';
    stream=await navigator.mediaDevices.getUserMedia({video:{facingMode:'environment'},audio:false});
    vid.srcObject=stream; await vid.play();
    cv.width=vid.videoWidth||innerWidth; cv.height=vid.videoHeight||innerHeight;
    computeVFOV();
    statusEl.textContent='Camera OK';
    log('‚úÖ Camera OK', cv.width+'√ó'+cv.height, 'vFOV‚âà', vFOV.toFixed(1));
    $('bGeo').disabled=false;
  }catch(e){ statusEl.textContent='Camera error'; log('‚ùå Camera ERR', e.message); }
};

/* ---------- Geolocation ---------- */
$('bGeo').onclick = () => {
  statusEl.textContent='Getting location‚Ä¶';
  navigator.geolocation.getCurrentPosition(p=>{
    lat=p.coords.latitude; lng=p.coords.longitude;
    statusEl.textContent='Location OK';
    log('‚úÖ Geo OK', lat.toFixed(5), lng.toFixed(5));
    $('bGyro').disabled=false;
  }, e=>{ statusEl.textContent='Location error'; log('‚ùå Geo ERR', e.message); },
  { enableHighAccuracy:true, timeout:10000 });
};

/* ---------- Orientation ---------- */
function onOri(e){
  const h=(e.webkitCompassHeading!=null)?e.webkitCompassHeading:(360-(e.alpha||0));
  const p=(e.beta||0)-90;  // portrait: ~0 near horizon
  const r=(e.gamma||0);    // roll
  rawH=(h+360)%360; rawP=p; rawR=r;
  smoothH = smoothH*(1-SMOOTH) + rawH*SMOOTH;
  smoothP = smoothP*(1-SMOOTH) + rawP*SMOOTH;
  smoothR = smoothR*(1-SMOOTH) + rawR*SMOOTH;
  statusEl.textContent = `H:${smoothH.toFixed(1)}¬∞  P:${(smoothP-pitchZero).toFixed(1)}¬∞`;
  hdgTxt.textContent = `H: ${Math.round(smoothH)}¬∞`;
  needle.style.transform = `translate(-50%,-85%) rotate(${smoothH}deg)`;
}
$('bGyro').onclick = () => {
  statusEl.textContent='Enabling motion‚Ä¶';
  if(typeof DeviceOrientationEvent?.requestPermission==='function'){
    DeviceOrientationEvent.requestPermission().then(s=>{
      if(s==='granted'){
        addEventListener('deviceorientation', onOri);
        $('bAR').disabled=false; statusEl.textContent='Motion OK'; log('‚úÖ Gyro OK');
      } else { statusEl.textContent='Motion denied'; log('‚ùå Gyro DENIED'); }
    }).catch(err=>{ statusEl.textContent='Motion error'; log('‚ùå Gyro ERR', err); });
  } else {
    addEventListener('deviceorientation', onOri);
    $('bAR').disabled=false; statusEl.textContent='Motion OK'; log('‚úÖ Gyro OK (no prompt)');
  }
};

/* ---------- Build full 24h path ---------- */
function buildFullPath(){
  path.length=0;
  const now=new Date();
  const start=new Date(now.getFullYear(),now.getMonth(),now.getDate(),0,0,0,0);
  const end=new Date(start); end.setDate(end.getDate()+1);
  const t=new Date(start);
  while(t<=end){
    const pos=SunCalc.getPosition(t,lat,lng);
    path.push({t:new Date(t), azN:sunAzFromNorthCW(pos.azimuth), alt:rad2deg(pos.altitude)});
    t.setMinutes(t.getMinutes()+5); // smooth curve
  }
  const un=unwrap(path.map(p=>p.azN));
  for(let i=0;i<path.length;i++) path[i].azU=un[i];
  log('üéØ 24h path points:', path.length);
}

/* ---------- Rendering ---------- */
function draw(){
  const w=cv.width, h=cv.height;
  ctx.clearRect(0,0,w,h);

  // Horizon with roll + auto-levelling baseline
  const effPitch = smoothP - pitchZero;
  const centerY  = (0.5 - (effPitch / vFOV)) * h;
  const tilt     = deg2rad(smoothR);
  ctx.save();
  ctx.translate(w/2, centerY);
  ctx.rotate(tilt);
  ctx.strokeStyle='rgba(255,255,255,.72)'; ctx.lineWidth=2;
  ctx.beginPath(); ctx.moveTo(-w,0); ctx.lineTo(w,0); ctx.stroke();
  // tiny ticks
  ctx.globalAlpha=.7;
  for(let d=-20; d<=20; d+=5){ if(d===0) continue; ctx.beginPath(); ctx.moveTo(-8, d*(-h/vFOV)); ctx.lineTo(8, d*(-h/vFOV)); ctx.stroke(); }
  ctx.restore();

  // Projection (linear-with-FOV for iOS stability)
  const halfH=HFOV/2, halfV=vFOV/2, visPad=1.35; // forgiving pad to avoid vanish at edges
  const proj=(rAz,rAlt)=>({
    x:(0.5 + (rAz/HFOV))*w,
    y:(0.5 - (rAlt/vFOV))*h,
    vis: Math.abs(rAz)<=halfH*visPad && Math.abs(rAlt)<=halfV*visPad
  });

  function strokeSegment(list, color, dashed){
    if(list.length<2) return;
    ctx.lineWidth=3; ctx.strokeStyle=color; ctx.setLineDash(dashed?[6,6]:[]);
    ctx.beginPath(); let drawing=false; let prevX=null;
    for(const pt of list){
      const rAz = shortestDelta(pt.azN, smoothH);
      const rAlt= pt.alt - effPitch;
      const p=proj(rAz,rAlt);
      if(!p.vis){ if(drawing){ ctx.stroke(); drawing=false; prevX=null; } continue; }
      if(drawing && prevX!=null && Math.abs(p.x-prevX)>w*0.35){ ctx.stroke(); ctx.beginPath(); drawing=false; }
      if(!drawing){ ctx.moveTo(p.x,p.y); drawing=true; } else { ctx.lineTo(p.x,p.y); }
      prevX=p.x;
    }
    if(drawing) ctx.stroke();
    ctx.setLineDash([]);
  }

  // Segments: day (over), night (under)
  const day=[], night=[]; let curD=[], curN=[];
  for(const pt of path){
    if(pt.alt>0){ if(curN.length){ night.push(curN); curN=[]; } curD.push(pt); }
    else{ if(curD.length){ day.push(curD); curD=[]; } curN.push(pt); }
  }
  if(curD.length) day.push(curD); if(curN.length) night.push(curN);

  // Night below, day above
  night.forEach(s=>strokeSegment(s,'var(--night)',true));
  // add a subtle gold glow under the day path
  ctx.save(); ctx.shadowColor='rgba(255,180,0,.35)'; ctx.shadowBlur=12;
  day.forEach(s=>strokeSegment(s,'var(--gold)',false));
  ctx.restore();

  // Hour labels (every 1h)
  ctx.font='600 12px Inter, system-ui, sans-serif'; ctx.textAlign='center';
  for(const pt of path){
    if(pt.t.getMinutes()!==0) continue;
    const rAz = shortestDelta(pt.azN, smoothH);
    const rAlt= pt.alt - effPitch;
    const p=proj(rAz,rAlt); if(!p.vis) continue;
    const label=pt.t.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'});
    ctx.save();
    ctx.lineWidth=4; ctx.strokeStyle='var(--edge)'; ctx.fillStyle='var(--ink)';
    ctx.strokeText(label,p.x,p.y-10); ctx.fillText(label,p.x,p.y-10);
    ctx.restore();
    ctx.beginPath(); ctx.arc(p.x,p.y,3,0,Math.PI*2);
    ctx.fillStyle='rgba(255,255,255,.92)'; ctx.fill();
  }

  // ‚ÄúNow‚Äù marker on the path (or edge arrow)
  const now = new Date();
  const posNow = SunCalc.getPosition(now, lat, lng);
  const azNow  = sunAzFromNorthCW(posNow.azimuth);
  const altNow = rad2deg(posNow.altitude);
  const rAzNow = shortestDelta(azNow, smoothH);
  const rAltNow= altNow - effPitch;
  const pNow   = proj(rAzNow, rAltNow);

  if (pNow.vis){
    ctx.save();
    ctx.shadowColor='rgba(255,200,0,.75)'; ctx.shadowBlur=18;
    ctx.fillStyle='rgba(255,200,0,1)';
    ctx.beginPath(); ctx.arc(pNow.x, pNow.y, 10, 0, Math.PI*2); ctx.fill();
    ctx.restore();
    ctx.fillStyle='var(--ink)'; ctx.font='700 12px Inter'; ctx.textAlign='center';
    ctx.fillText('Now', pNow.x, pNow.y - 16);
  } else {
    // off-screen hint
    let x = clamp(pNow.x, 18, w-18), y = clamp(pNow.y, 18, h-18);
    if (pNow.x < 0) x = 18; else if (pNow.x > w) x = w-18;
    if (pNow.y < 0) y = 18; else if (pNow.y > h) y = h-18;
    const ang = Math.atan2(pNow.y - y, pNow.x - x);
    ctx.save(); ctx.translate(x,y); ctx.rotate(ang);
    ctx.fillStyle='rgba(255,200,0,1)';
    ctx.beginPath(); ctx.moveTo(-10,-8); ctx.lineTo(14,0); ctx.lineTo(-10,8); ctx.closePath(); ctx.fill();
    ctx.restore();
  }

  raf=requestAnimationFrame(draw);
}

/* ---------- Start AR ---------- */
$('bAR').onclick=()=>{
  if(arActive) return;
  if(!stream || lat==null){ log('‚ùå Missing prerequisites'); return; }
  cv.width=vid.videoWidth||innerWidth; cv.height=vid.videoHeight||innerHeight;
  computeVFOV();
  buildFullPath();
  // capture pitch baseline so horizon "sticks" when you start
  pitchZero = smoothP;
  if(raf) cancelAnimationFrame(raf);
  draw();
  arActive=true; $('bAR').disabled=true;
  statusEl.textContent='AR Active'; log('üéâ AR started');
};

/* ---------- Debug controls ---------- */
toggleDbg.onclick = ()=>{
  const open = dbg.classList.toggle('open');
  toggleDbg.textContent = open ? '‚ñº' : '‚ñ≤';
};
$('bCopy').onclick=async()=>{ try{ await navigator.clipboard.writeText(dbg.textContent); log('üìã Logs copied'); }catch(e){ log('‚ùå Copy failed', e.message); } };

/* ---------- Cleanup ---------- */
addEventListener('beforeunload',()=>{ if(stream) stream.getTracks().forEach(t=>t.stop()); if(raf) cancelAnimationFrame(raf); });
</script>
</body>
</html>
