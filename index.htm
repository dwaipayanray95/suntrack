<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover" />
<title>SunTrack AR ‚Ä¢ Full Dome</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/suncalc/1.9.0/suncalc.min.js"></script>
<style>
  :root{
    --glass: rgba(18,18,18,.58);
    --gold:  rgba(255,215,0,.98);
    --glow:  rgba(255,180,0,.35);
    --night: rgba(205,205,205,.38);
    --ink:   rgba(255,255,255,.94);
    --muted: rgba(255,255,255,.70);
    --edge:  rgba(0,0,0,.55);
  }
  html,body{margin:0;height:100%;background:#000;color:#fff;font:14px/1.45 Inter,system-ui,-apple-system,Segoe UI,Roboto,sans-serif;overflow:hidden}
  video,canvas{position:absolute;inset:0;width:100%;height:100%;object-fit:cover}
  video{z-index:0} canvas{z-index:1}

  /* Topbar (minimal) */
  #topbar{
    position:fixed; left:12px; right:12px; top:calc(env(safe-area-inset-top) + 8px);
    display:flex; align-items:center; gap:8px; z-index:3;
  }
  .pill{
    background:var(--glass); backdrop-filter:saturate(140%) blur(6px);
    border:1px solid rgba(255,255,255,.08); border-radius:12px;
    padding:8px 12px; font-weight:600; box-shadow:0 4px 18px rgba(0,0,0,.35);
    white-space:nowrap;
  }
  #brand{font-size:12px;color:var(--muted)}
  #status{flex:1;text-align:center}
  #quick{display:flex; gap:6px; align-items:center}
  #quick select, #quick button{
    appearance:none;border:1px solid rgba(255,255,255,.12);border-radius:10px;background:#1e1e1e;color:#fff;
    font-weight:600;letter-spacing:.2px;font-size:12px;padding:8px 10px;
  }

  /* Bottom controls */
  #controls{
    position:fixed; left:12px; right:12px; bottom:calc(env(safe-area-inset-bottom) + 108px);
    display:flex; gap:8px; z-index:3; background:var(--glass); border:1px solid rgba(255,255,255,.08);
    padding:10px; border-radius:12px; backdrop-filter:saturate(140%) blur(6px); box-shadow:0 8px 24px rgba(0,0,0,.45);
  }
  #controls button{
    appearance:none;border:0;border-radius:10px;padding:10px 12px;background:#1e1e1e;color:#fff;
    font-weight:600;letter-spacing:.2px
  }
  #controls button.primary{background:#2b5cff}
  #controls button:disabled{opacity:.45}

  /* Debug (collapse) */
  #debugWrap{position:fixed; left:0; right:0; bottom:0; z-index:2; background:rgba(0,0,0,.84); border-top:1px solid rgba(255,255,255,.06)}
  #debugBar{display:flex; align-items:center; justify-content:space-between; padding:6px 10px; color:#8cf; font:12px/1.25 ui-monospace,Menlo,Consolas,monospace}
  #debug{max-height:0; overflow:auto; margin:0; padding:0 10px 8px 10px; color:#8cf; font:12px/1.25 ui-monospace,Menlo,Consolas,monospace; white-space:pre; transition:max-height .25s ease}
  #debug.open{max-height:120px}
  #toggleDbg{background:transparent;border:0;color:#8cf;font-weight:700}
</style>
</head>
<body>
  <video id="vid" playsinline autoplay muted></video>
  <canvas id="cv"></canvas>

  <div id="topbar">
    <div id="brand" class="pill">o4-mini-high ‚Ä¢ made with GPT-5</div>
    <div id="status" class="pill">Ready</div>
    <div id="quick" class="pill">
      <button id="bLevel">Level</button>
      <select id="lens">
        <option value="65">Wide</option>
        <option value="120">Ultra-wide</option>
        <option value="34">2√ó</option>
      </select>
    </div>
  </div>

  <div id="controls">
    <button id="bCam" class="primary">Start Camera</button>
    <button id="bGeo" disabled>Get Location</button>
    <button id="bGyro" disabled>Enable Motion</button>
    <button id="bAR" disabled>Start AR</button>
    <button id="bCopy">Copy Logs</button>
  </div>

  <div id="debugWrap">
    <div id="debugBar">
      <strong>Debug</strong>
      <button id="toggleDbg">‚ñ≤</button>
    </div>
    <pre id="debug">[ready]
</pre>
  </div>

<script>
/* ===== DOM & logging ===== */
const $ = id => document.getElementById(id);
const vid=$('vid'), cv=$('cv'), ctx=cv.getContext('2d');
const statusEl=$('status'), dbg=$('debug'), toggleDbg=$('toggleDbg');
const selLens=$('lens'), bLevel=$('bLevel');
const log=(...a)=>{ dbg.textContent+=a.join(' ')+'\n'; dbg.scrollTop=dbg.scrollHeight; };

/* ===== State ===== */
let stream;
let lat=null, lng=null;
let rawH=0, rawP=0, rawR=0;
let smoothH=0, smoothP=0, smoothR=0;
const SMOOTH=0.12;

let HFOV=65;      // selected lens HFOV
let vFOV=45;      // computed from aspect
let pitchZero=0;  // user ‚ÄúLevel‚Äù baseline
let raf=null, arActive=false;

let path=[];      // 24h [{t, azN, alt}]

/* ===== Math utils ===== */
const rad2deg=r=>r*180/Math.PI, deg2rad=d=>d*Math.PI/180;
function computeVFOV(){
  const w=cv.width||innerWidth, h=cv.height||innerHeight;
  vFOV = 2*Math.atan(Math.tan(deg2rad(HFOV/2))*(h/w))*180/Math.PI;
}
function refractLift(altDeg){
  if (altDeg >= 10) return 0;
  if (altDeg <= 5)  return 0.833;
  return 0.833 * (1 - (altDeg-5)/5);
}
function enuFromAzAlt(azNdeg, altDeg){
  const az = deg2rad(azNdeg);
  const alt= deg2rad(altDeg);
  const ca=Math.cos(alt), sa=Math.sin(alt);
  const sA=Math.sin(az), cA=Math.cos(az);
  return [ ca*sA, ca*cA, sa ]; // [E,N,U]
}
function dot(a,b){ return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]; }
function cross(a,b){ return [ a[1]*b[2]-a[2]*b[1], a[2]*b[0]-a[0]*b[2], a[0]*b[1]-a[1]*b[0] ]; }
function norm(a){ return Math.hypot(a[0],a[1],a[2]); }
function normalize(a){ const n=norm(a)||1; return [a[0]/n,a[1]/n,a[2]/n]; }
function clamp(v,min,max){ return Math.max(min, Math.min(max,v)); }

/* ===== Camera basis (yaw/pitch/roll ‚Üí ENU) ===== */
function buildCameraBasis(headingDeg, pitchDeg, rollDeg){
  const yaw = deg2rad(headingDeg);
  const pitch = deg2rad(pitchDeg - pitchZero);
  const roll = deg2rad(rollDeg);

  const hx = Math.sin(yaw), hy = Math.cos(yaw);
  const ch = Math.cos(pitch), sh = Math.sin(pitch);
  const fwd = normalize([ ch*hx, ch*hy, sh ]);

  const upW=[0,0,1];
  let right = normalize(cross(upW, fwd));
  let up    = normalize(cross(fwd, right));

  if (Math.abs(roll) > 1e-6){
    const cr=Math.cos(roll), sr=Math.sin(roll);
    const r2=[ right[0]*cr + up[0]*sr, right[1]*cr + up[1]*sr, right[2]*cr + up[2]*sr ];
    const u2=[ up[0]*cr - right[0]*sr, up[1]*cr - right[1]*sr, up[2]*cr - right[2]*sr ];
    right=normalize(r2); up=normalize(u2);
  }
  return {right, up, fwd};
}

/* ===== Projection (pinhole) ===== */
function makeProjector(basis, HFOVdeg, vFOVdeg, w, h){
  const tH=Math.tan(deg2rad(HFOVdeg/2));
  const tV=Math.tan(deg2rad(vFOVdeg/2));
  return (vW)=>{
    const x=dot(vW,basis.right), y=dot(vW,basis.up), z=dot(vW,basis.fwd);
    if (z<=1e-6) return {vis:false,inFront:false};
    const xN = x/(z*tH), yN = y/(z*tV);
    const px=(xN*0.5+0.5)*w, py=(-yN*0.5+0.5)*h;
    // generous visibility so curves don‚Äôt pop at the edge
    const vis = xN>=-1.35 && xN<=1.35 && yN>=-1.35 && yN<=1.35;
    return {x:px,y:py,vis,inFront:true};
  };
}

/* ===== Build full 24h path ===== */
function buildFullPath(){
  path.length=0;
  const now=new Date();
  const start=new Date(now.getFullYear(),now.getMonth(),now.getDate(),0,0,0,0);
  const end=new Date(start); end.setDate(end.getDate()+1);
  for(let t=new Date(start); t<=end; t.setMinutes(t.getMinutes()+5)){
    const pos=SunCalc.getPosition(t,lat,lng);
    const azN=(rad2deg(pos.azimuth)+180+360)%360; // SunCalc: from south CW ‚Üí from north CW
    let alt = rad2deg(pos.altitude) + refractLift(rad2deg(pos.altitude));
    path.push({t:new Date(t), azN, alt});
  }
  log('üéØ 24h path points:', path.length);
}

/* ===== Horizon polyline across 360¬∞ ===== */
function buildHorizonPoints(){
  const pts=[];
  const alt = refractLift(0); // tiny lift so your eye's horizon matches
  for(let a=0; a<360; a+=2){
    pts.push( enuFromAzAlt(a, alt) );
  }
  return pts;
}

/* ===== Camera ===== */
$('bCam').onclick = async () => {
  try{
    statusEl.textContent='Opening camera‚Ä¶';
    stream=await navigator.mediaDevices.getUserMedia({video:{facingMode:'environment'},audio:false});
    vid.srcObject=stream; await vid.play();
    cv.width=vid.videoWidth||innerWidth; cv.height=vid.videoHeight||innerHeight;
    computeVFOV();
    statusEl.textContent='Camera OK';
    log('‚úÖ Camera OK', cv.width+'√ó'+cv.height, 'vFOV‚âà', vFOV.toFixed(1));
    $('bGeo').disabled=false;
  }catch(e){ statusEl.textContent='Camera error'; log('‚ùå Camera ERR', e.message); }
};

/* ===== Geolocation ===== */
$('bGeo').onclick = () => {
  statusEl.textContent='Getting location‚Ä¶';
  navigator.geolocation.getCurrentPosition(p=>{
    lat=p.coords.latitude; lng=p.coords.longitude;
    statusEl.textContent='Location OK';
    log('‚úÖ Geo OK', lat.toFixed(5), lng.toFixed(5));
    $('bGyro').disabled=false;
  }, e=>{ statusEl.textContent='Location error'; log('‚ùå Geo ERR', e.message); },
  { enableHighAccuracy:true, timeout:10000 });
};

/* ===== Orientation ===== */
function onOri(e){
  const h=(e.webkitCompassHeading!=null)?e.webkitCompassHeading:(360-(e.alpha||0));
  const p=(e.beta||0)-90;  // portrait baseline
  const r=(e.gamma||0);
  rawH=(h+360)%360; rawP=p; rawR=r;
  smoothH = smoothH*(1-SMOOTH) + rawH*SMOOTH;
  smoothP = smoothP*(1-SMOOTH) + rawP*SMOOTH;
  smoothR = smoothR*(1-SMOOTH) + rawR*SMOOTH;
  statusEl.textContent = `H:${smoothH.toFixed(1)}¬∞  P:${(smoothP-pitchZero).toFixed(1)}¬∞`;
}
$('bGyro').onclick = () => {
  statusEl.textContent='Enabling motion‚Ä¶';
  if(typeof DeviceOrientationEvent?.requestPermission==='function'){
    DeviceOrientationEvent.requestPermission().then(s=>{
      if(s==='granted'){
        addEventListener('deviceorientation', onOri);
        $('bAR').disabled=false; statusEl.textContent='Motion OK'; log('‚úÖ Gyro OK');
      } else { statusEl.textContent='Motion denied'; log('‚ùå Gyro DENIED'); }
    }).catch(err=>{ statusEl.textContent='Motion error'; log('‚ùå Gyro ERR', err); });
  } else {
    addEventListener('deviceorientation', onOri);
    $('bAR').disabled=false; statusEl.textContent='Motion OK'; log('‚úÖ Gyro OK (no prompt)');
  }
};

/* ===== Lens / Level ===== */
selLens.onchange = ()=>{ HFOV=parseFloat(selLens.value); computeVFOV(); log('üîÅ Lens HFOV',HFOV,'vFOV‚âà',vFOV.toFixed(1)); };
bLevel.onclick = ()=>{ pitchZero=smoothP; log('üß≠ Horizon leveled. pitchZero=', pitchZero.toFixed(2)); };

/* ===== Draw helpers ===== */
function strokePolyline(project, vecs, style={color:'#fff', width:2, dash:null}){
  const w=cv.width;
  ctx.lineWidth=style.width; ctx.strokeStyle=style.color;
  ctx.setLineDash(style.dash?style.dash:[]);
  ctx.beginPath(); let drawing=false; let prevX=null;
  for(const v of vecs){
    const p=project(v);
    if(!p.vis){ if(drawing){ ctx.stroke(); drawing=false; prevX=null; } continue; }
    if(drawing && prevX!=null && Math.abs(p.x-prevX)>w*0.45){ ctx.stroke(); ctx.beginPath(); drawing=false; }
    if(!drawing){ ctx.moveTo(p.x,p.y); drawing=true; } else { ctx.lineTo(p.x,p.y); }
    prevX=p.x;
  }
  if(drawing) ctx.stroke();
  ctx.setLineDash([]);
}

/* ===== Render loop ===== */
const horizonVecs = buildHorizonPoints();

function draw(){
  const w=cv.width, h=cv.height;
  ctx.clearRect(0,0,w,h);

  const basis = buildCameraBasis(smoothH, smoothP, smoothR);
  const project = makeProjector(basis, HFOV, vFOV, w, h);

  // Horizon (always computed across 360¬∞, so it won't vanish)
  strokePolyline(project, horizonVecs, {color:'rgba(255,255,255,.85)', width:2, dash:null});

  // Build ENU vectors for path on-the-fly (cheap)
  const daySeg=[], nightSeg=[];
  for(const pt of path){
    const v= enuFromAzAlt(pt.azN, pt.alt);
    if(pt.alt>0) daySeg.push(v); else nightSeg.push(v);
  }

  // Night under, then day with glow
  strokePolyline(project, nightSeg, {color:'var(--night)', width:3, dash:[6,6]});
  ctx.save(); ctx.shadowColor='var(--glow)'; ctx.shadowBlur=12;
  strokePolyline(project, daySeg, {color:'var(--gold)', width:3});
  ctx.restore();

  // Hour labels (every hour)
  ctx.font='600 12px Inter, system-ui, sans-serif'; ctx.textAlign='center';
  for(const pt of path){
    if(pt.t.getMinutes()!==0) continue;
    const v= enuFromAzAlt(pt.azN, pt.alt);
    const p=project(v); if(!p.vis) continue;
    const label=pt.t.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'});
    ctx.save(); ctx.lineWidth=4; ctx.strokeStyle='var(--edge)'; ctx.fillStyle='var(--ink)';
    ctx.strokeText(label,p.x,p.y-10); ctx.fillText(label,p.x,p.y-10);
    ctx.restore();
    ctx.beginPath(); ctx.arc(p.x,p.y,3,0,Math.PI*2);
    ctx.fillStyle='rgba(255,255,255,.92)'; ctx.fill();
  }

  // ‚ÄúNow‚Äù marker
  const now=new Date();
  const posNow=SunCalc.getPosition(now, lat, lng);
  const azNow=(rad2deg(posNow.azimuth)+180+360)%360;
  const altNow=rad2deg(posNow.altitude)+refractLift(rad2deg(posNow.altitude));
  const pNow=makeProjector(basis, HFOV, vFOV, w, h)( enuFromAzAlt(azNow, altNow) );
  if(pNow.vis){
    ctx.save(); ctx.shadowColor='rgba(255,200,0,.75)'; ctx.shadowBlur=18; ctx.fillStyle='rgba(255,200,0,1)';
    ctx.beginPath(); ctx.arc(pNow.x, pNow.y, 10, 0, Math.PI*2); ctx.fill(); ctx.restore();
    ctx.fillStyle='var(--ink)'; ctx.font='700 12px Inter'; ctx.textAlign='center';
    ctx.fillText('Now', pNow.x, pNow.y-16);
  } else {
    const x=clamp(pNow.x,18,w-18), y=clamp(pNow.y,18,h-18);
    const ang=Math.atan2(pNow.y-y, pNow.x-x);
    ctx.save(); ctx.translate(x,y); ctx.rotate(ang); ctx.fillStyle='rgba(255,200,0,1)';
    ctx.beginPath(); ctx.moveTo(-10,-8); ctx.lineTo(14,0); ctx.lineTo(-10,8); ctx.closePath(); ctx.fill(); ctx.restore();
  }

  raf=requestAnimationFrame(draw);
}

/* ===== Start AR ===== */
$('bAR').onclick=()=>{
  if(arActive) return;
  if(!stream || lat==null){ log('‚ùå Missing prerequisites'); return; }
  cv.width=vid.videoWidth||innerWidth; cv.height=vid.videoHeight||innerHeight;
  computeVFOV();
  buildFullPath();
  pitchZero = smoothP; // baseline; tap Level to refine
  if(raf) cancelAnimationFrame(raf);
  draw();
  arActive=true; $('bAR').disabled=true;
  statusEl.textContent='AR Active'; log('üéâ AR started');
};

/* ===== Buttons & debug ===== */
toggleDbg.onclick=()=>{ const open=dbg.classList.toggle('open'); toggleDbg.textContent=open?'‚ñº':'‚ñ≤'; };
$('bCopy').onclick=async()=>{ try{ await navigator.clipboard.writeText(dbg.textContent); log('üìã Logs copied'); }catch(e){ log('‚ùå Copy failed', e.message); } };

/* ===== Lens init ===== */
HFOV=parseFloat(selLens.value);

/* ===== Cleanup ===== */
addEventListener('beforeunload',()=>{ if(stream) stream.getTracks().forEach(t=>t.stop()); if(raf) cancelAnimationFrame(raf); });
</script>
</body>
</html>
