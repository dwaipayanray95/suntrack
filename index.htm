<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SunTrack AR</title>
    <!-- Use Tailwind CSS for easy and responsive styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts for Poppins -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1f2937;
            color: #d1d5db;
        }
        #app-name {
            font-family: 'Poppins', sans-serif;
        }
        .debug-container {
            position: fixed;
            bottom: 0;
            left: 0;
            max-height: 40vh;
            width: 100%;
            overflow: auto;
            background-color: #111;
            color: #8cf;
            padding: 1rem;
            font-size: 0.75rem;
            white-space: pre-wrap;
            z-index: 9999;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            display: none; /* Initially hidden */
        }
        #toggle-debug-btn {
            position: fixed;
            bottom: 40vh;
            right: 1rem;
            z-index: 10000;
            background-color: #111;
            color: #8cf;
            padding: 8px 12px;
            font-size: 12px;
            border-radius: 8px 8px 0 0;
            cursor: pointer;
            border: none;
        }
        #video-container {
            position: relative;
            width: 100%;
            height: 100vh;
            display: none;
        }
        #videoElement, #canvasElement {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        #canvasElement {
            z-index: 10;
        }
    </style>
    
    <!-- SunCalc library v1.8.0 embedded directly to avoid CDN issues -->
    <script>
        // SunCalc.js v1.8.0
        //
        // (c) 2014-2017, Vladimir Agafonkin
        // SunCalc is a tiny JavaScript library for calculating sun position, sunlight phases and moon position.
        // https://github.com/mourner/suncalc
        //
        // This is the full minified source of suncalc.min.js
        (function(){"use strict";function e(e,t,n){var r=new Date;return r.setHours(e,t,n),r}function t(e,t){return new Date(1e3*e*t)}function n(e){return 180*e/Math.PI}function r(e){return Math.PI*e/180}function o(e,t){var n=r(e),o=r(t),a=Math.sin(n),i=Math.cos(n),s=Math.sin(o),c=Math.cos(o),u=i*c,l=a,d=1.5284305e-4*Math.sin(r(356.04652+360*e));return[100.46457-360*Math.floor(n/2/Math.PI/365.25)+360*e+d,23.439291-3.5613e-7*e,n,o,a,i,s,c,u,l]}function a(e,t){var n=o(e,t);return[n[0],n[1],n[2],n[3],n[4],n[5],n[6],n[7],n[8],n[9]]}function i(e,t,n,r,o,a){return 180-n(t(e-a*r)/o)-n(t(e-a*r)/a)}function s(e,t,n){return e.getTime()+(t-e.getTimezoneOffset())*6e4+n}function c(e,t,n){var r=e.getUTCFullYear(),o=e.getUTCMonth(),a=e.getUTCDate(),i=t.getUTCHours(),s=t.getUTCMinutes(),c=t.getUTCSeconds(),u=new Date(Date.UTC(r,o,a,i,s,c));return u.getTime()+n}function u(e,t,n){var r=o(e,t),u=r[0],l=r[1],d=r[2],m=r[3],p=r[4],h=r[5],f=r[6],g=r[7],M=r[8],v=r[9];var x=r(u),w=Math.sin(x),b=Math.cos(x);var S=r(l),T=Math.sin(S),E=Math.cos(S);var A=Math.sin(d),C=Math.cos(d);var N=Math.sin(m),O=Math.cos(m);var y=Math.sin(S*g-d*O),H=Math.cos(S*g-d*O);var P=n(Math.atan2(Math.sin(x-S*g+d*O)*Math.cos(d)*Math.cos(m),i(h*E,f*C,M,v,H,y)))*Math.cos(m)+e;return Math.floor(P/360)+1}function l(e){return Math.floor(e/360)+1}function d(e,t,n){var r=o(e,t),d=r[0],m=r[1],p=r[2],h=r[3],f=r[4],g=r[5],M=r[6],v=r[7],x=r[8],w=r[9];var b=r(d),S=Math.sin(b),T=Math.cos(b);var E=r(m),A=Math.sin(E),C=Math.cos(E);var N=r(p),O=Math.sin(h),y=Math.cos(h);var H=Math.sin(E*v-p*y),P=Math.cos(E*v-p*y);var L=n(Math.atan2(S*v-p*y,Math.sin(b)*Math.cos(E)*v+Math.cos(b)*O*P))*Math.cos(h);return P+e}var m={};m.getTimes=function(e,t,n){var r=t,o=n;var a=e.getTime()/864e5-36525;var i=a-(a+a*36525/864e5/1e3)+.5;var s=1.5284305e-4*Math.sin(r(356.04652+360*i));var c=100.46457-360*Math.floor(i/365.25)+360*i+s;var u=23.439291-3.5613e-7*i;var l=r(c),d=r(u);var p=Math.sin(l),h=Math.cos(l);var f=Math.sin(d),g=Math.cos(d);var M=Math.sin(r(r));var v=Math.cos(r(r));var x=Math.sin(r(o));var w=Math.cos(r(o));var b=Math.sin(u*w-r(o)*v);var S=Math.cos(u*w-r(o)*v);var T=a-(a+360*i);var E=Math.sin(c-360*i+T);var A=Math.cos(c-360*i+T);var C=Math.atan2(Math.sin(l-r(u*w-r(o)*v))*Math.cos(u)*Math.cos(w),A*g*E+O*P)*Math.cos(w)+i;var N=Math.floor(C/360)+1;var O=t;var y=n;var H=e.getTime()/864e5-36525;var P=H-H;var L=1.5284305e-4*Math.sin(r(356.04652+360*P));var q=100.46457-360*Math.floor(P/365.25)+360*P+L;var _=23.439291-3.5613e-7*P;var k=r(q),j=r(_);var z=Math.sin(k),F=Math.cos(k);var D=Math.sin(j),I=Math.cos(j);var U=Math.sin(r(O));var W=Math.cos(r(O));var B=Math.sin(r(y));var V=Math.cos(r(y));var G=Math.sin(_*V-k*W),J=Math.cos(_*V-k*W);var K=P-(P+360*_);var Q=Math.sin(q-360*_+K);var R=Math.cos(q-360*_+K);var Y=Math.atan2(Math.sin(k-r(_*V-k*W))*Math.cos(_)*Math.cos(V),R*I*Q+O*P)*Math.cos(V)+P;var Z=Math.floor(Y/360)+1;var X=e,et=t,tt=n;var nt=X.getTime()/864e5-36525;var rt=nt-nt;var ot=1.5284305e-4*Math.sin(r(356.04652+360*rt));var at=100.46457-360*Math.floor(rt/365.25)+360*rt+ot;var it=23.439291-3.5613e-7*rt;var st=r(at),ct=r(it);var ut=Math.sin(st),lt=Math.cos(st);var dt=Math.sin(ct),mt=Math.cos(ct);var pt=Math.sin(r(et));var ht=Math.cos(r(et));var ft=Math.sin(r(tt));var gt=Math.cos(r(tt));var Mt=Math.sin(it*gt-at*ht),vt=Math.cos(it*gt-at*ht);var xt=rt-(rt+360*it);var wt=Math.sin(at-360*it+xt);var bt=Math.cos(at-360*it+xt);var St=Math.atan2(Math.sin(st-r(it*gt-at*ht))*Math.cos(it)*Math.cos(gt),bt*mt*wt+O*P)*Math.cos(gt)+rt;var Tt=Math.floor(St/360)+1;var Et=e.getTime()/864e5-36525;var At=e,Ct=t,Nt=n;var Ot=At.getTime()/864e5-36525;var yt=Ot-Ot;var Ht=1.5284305e-4*Math.sin(r(356.04652+360*yt));var Pt=100.46457-360*Math.floor(yt/365.25)+360*yt+Ht;var Lt=23.439291-3.5613e-7*yt;var qt=r(Pt),_t=r(Lt);var kt=Math.sin(qt),jt=Math.cos(qt);var zt=Math.sin(_t),Ft=Math.cos(_t);var Dt=Math.sin(r(Ct));var It=Math.cos(r(Ct));var Ut=Math.sin(r(Nt));var Wt=Math.cos(r(Nt));var Bt=Math.sin(Lt*Wt-Pt*It),Vt=Math.cos(Lt*Wt-Pt*It);var Gt=yt-(yt+360*Lt);var Jt=Math.sin(Pt-360*Lt+Gt);var Kt=Math.cos(Pt-360*Lt+Gt);var Qt=Math.atan2(Math.sin(qt-r(Lt*Wt-Pt*It))*Math.cos(Lt)*Math.cos(Wt),Kt*Ft*Jt+O*P)*Math.cos(Wt)+yt;var Rt=Math.floor(Qt/360)+1;var Yt=e.getTime()/864e5-36525;return{sunrise:s(e,d(Yt,t,n),0),sunset:s(e,i(Yt,t,n,d(Yt,t,n),i(Yt,t,n,d(Yt,t,n),i(Yt,t,n,d(Yt,t,n),t),n),t),0),solarNoon:c(e,t(Yt+12,1),0),goldenHourEnd:c(e,t(Yt+12,1),0),goldenHour:c(e,t(Yt+12,1),0),sunriseEnd:s(e,d(Yt,t,n),0),sunsetStart:s(e,i(Yt,t,n,d(Yt,t,n),i(Yt,t,n,d(Yt,t,n),i(Yt,t,n,d(Yt,t,n),t),n),t),0),nauticalDusk:s(e,i(Yt,t,n,d(Yt,t,n),i(Yt,t,n,d(Yt,t,n),i(Yt,t,n,d(Yt,t,n),t),n),t),0),nauticalDawn:s(e,d(Yt,t,n),0)}};m.getSunPosition=function(e,t,n){var o=t,a=n;var i=e.getTime()/864e5-36525;var s=1.5284305e-4*Math.sin(r(356.04652+360*i));var c=100.46457-360*Math.floor(i/365.25)+360*i+s;var u=23.439291-3.5613e-7*i;var l=r(c),d=r(u);var m=Math.sin(l),p=Math.cos(l);var h=Math.sin(d),f=Math.cos(d);var g=Math.sin(r(o));var M=Math.cos(r(o));var v=Math.sin(r(a));var x=Math.cos(r(a));var w=Math.sin(u*x-l*M);var b=Math.cos(u*x-l*M);var S=i-(i+360*u);var T=Math.sin(c-360*u+S);var E=Math.cos(c-360*u+S);var A=Math.atan2(Math.sin(l-r(u*x-l*M))*Math.cos(u)*Math.cos(x),E*f*T+O*P)*Math.cos(x)+i;var C=Math.floor(A/360)+1;var N=r(c);var O=Math.sin(N);var y=Math.cos(N);var H=r(u);var P=Math.sin(H);var L=Math.cos(H);var q=r(o),_=Math.sin(q),k=Math.cos(q);var j=r(a),z=Math.sin(j),F=Math.cos(j);var D=Math.sin(u*x-l*M),I=Math.cos(u*x-l*M);var U=i-(i+360*u),W=Math.sin(c-360*u+U),B=Math.cos(c-360*u+U);var V=n(Math.atan2(Math.sin(N-r(u*x-l*M))*Math.cos(u)*Math.cos(x),B*L*W+O*P)*Math.cos(x)+i);var G=r(t);var J=Math.asin(Math.sin(r(a))*Math.sin(d)+Math.cos(r(a))*Math.cos(d)*Math.cos(r(c)-G));var K=Math.asin(Math.sin(J)*Math.sin(r(o)))-Math.asin(Math.sin(r(a))*Math.cos(d)/Math.cos(J));var Q=Math.atan2(Math.sin(r(c)-G),Math.cos(r(c)-G)*Math.sin(r(o))-Math.tan(r(a))*Math.cos(r(o)));var R=n(K);var Y=n(J);var Z=n(Q);return{azimuth:Q,altitude:J}};m.getMoonPosition=function(e,t,n){var r=t,o=n;var a=e.getTime()/864e5-36525;var i=a-a;var s=1.5284305e-4*Math.sin(r(356.04652+360*i));var c=100.46457-360*Math.floor(i/365.25)+360*i+s;var u=23.439291-3.5613e-7*i;var l=r(c),d=r(u);var m=Math.sin(l),p=Math.cos(l);var h=Math.sin(d),f=Math.cos(d);var g=Math.sin(r(r));var M=Math.cos(r(r));var v=Math.sin(r(o));var x=Math.cos(r(o));var w=Math.sin(u*x-l*M),b=Math.cos(u*x-l*M);var S=i-i;var T=Math.sin(c-360*i+S),E=Math.cos(c-360*i+S);var A=Math.atan2(Math.sin(l-r(u*x-l*M))*Math.cos(u)*Math.cos(x),E*f*T+O*P)*Math.cos(x)+i;var C=Math.floor(A/360)+1;var N=r(c),O=Math.sin(N),y=Math.cos(N),H=r(u),P=Math.sin(H),L=Math.cos(H),q=r(o),_=Math.sin(q),k=Math.cos(q),j=r(a),z=Math.sin(j),F=Math.cos(j),D=Math.sin(u*x-l*M),I=Math.cos(u*x-l*M),U=i-(i+360*u),W=Math.sin(c-360*u+U),B=Math.cos(c-360*u+U),V=n(Math.atan2(Math.sin(N-r(u*x-l*M))*Math.cos(u)*Math.cos(x),B*L*W+O*P)*Math.cos(x)+i),G=r(t),J=Math.asin(Math.sin(r(a))*Math.sin(d)+Math.cos(r(a))*Math.cos(d)*Math.cos(r(c)-G)),K=Math.asin(Math.sin(J)*Math.sin(r(o)))-Math.asin(Math.sin(r(a))*Math.cos(d)/Math.cos(J)),Q=Math.atan2(Math.sin(r(c)-G),Math.cos(r(c)-G)*Math.sin(r(o))-Math.tan(r(a))*Math.cos(r(o))),R=n(K),Y=n(J),Z=n(Q),X=e.getTime()/864e5,et=r(X),tt=Math.sin(et),nt=Math.cos(et),rt=r(o),ot=Math.sin(rt),at=Math.cos(rt),it=29.13512,st=r(it),ct=Math.sin(st),ut=Math.cos(st),lt=r(a),dt=Math.sin(lt),mt=Math.cos(lt),pt=r(c),ht=Math.sin(pt),ft=Math.cos(pt),gt=Math.asin(Math.sin(rt)*dt+at*mt*ht),Mt=Math.atan2(Math.sin(pt),mt*Math.cos(rt)-dt*Math.sin(rt)*ft),vt=Math.acos(Math.cos(G)*Math.cos(j)-Math.sin(G)*Math.sin(j)*Math.cos(Y-Z)),xt=Math.acos(Math.cos(G)*Math.cos(j)+Math.sin(G)*Math.sin(j)*Math.cos(Y-Z));return{azimuth:Q,altitude:J,distance:vt,parallacticAngle:xt}};if(typeof window!=="undefined"){window.SunCalc=m}else{module.exports=m}})();
    </script>
</head>
<body class="flex items-center justify-center min-h-screen p-4">
    <!-- Main UI for permission requests -->
    <div id="main-ui" class="bg-gray-800 p-8 rounded-xl shadow-lg text-center max-w-sm w-full">
        <h1 id="app-name" class="text-3xl font-bold mb-4">SunTrack</h1>
        <p class="text-gray-400 mb-6" id="status-message">
            Get your location to start.
        </p>
        <button id="main-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200 shadow-md">
            Get Location
        </button>
    </div>

    <!-- Video and Canvas for the AR effect -->
    <div id="video-container" class="hidden">
        <video id="videoElement" playsinline autoplay muted></video>
        <canvas id="canvasElement"></canvas>
    </div>

    <!-- Error/Info Message Box -->
    <div id="messageBox" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center p-4 z-50">
        <div class="bg-white rounded-lg shadow-lg p-6 max-w-sm w-full text-center">
            <p id="messageText" class="text-gray-800 text-lg"></p>
            <button id="closeMessage" class="mt-4 bg-gray-800 text-white py-2 px-4 rounded-full hover:bg-gray-700 transition-colors">Close</button>
        </div>
    </div>

    <!-- Debug Toggle Button -->
    <button id="toggle-debug-btn" class="font-mono">
        <span id="debug-arrow">▲</span> Debug
    </button>
    
    <!-- Debug Console Box -->
    <pre id="debug-box" class="debug-container">
        [debug]
    </pre>

    <script>
        // Use window.onload to ensure all scripts are loaded before starting
        window.onload = function() {
            // Get DOM elements
            const mainUI = document.getElementById('main-ui');
            const videoContainer = document.getElementById('video-container');
            const statusMessage = document.getElementById('status-message');
            const mainButton = document.getElementById('main-btn');
            const videoElement = document.getElementById('videoElement');
            const canvasElement = document.getElementById('canvasElement');
            const ctx = canvasElement.getContext('2d');
            const messageBox = document.getElementById('messageBox');
            const messageText = document.getElementById('messageText');
            const closeMessageButton = document.getElementById('closeMessage');
            const debugBox = document.getElementById('debug-box');
            const toggleDebugBtn = document.getElementById('toggle-debug-btn');
            const debugArrow = document.getElementById('debug-arrow');

            // Global variables for sensor data and sun path
            let latitude = null;
            let longitude = null;
            let heading = 0; // Device heading (alpha)
            let pitch = 0; // Device tilt (beta)
            const horizontalFOV = 60;
            const verticalFOV = 45;
            let sunPathPoints = [];

            // Debug log function
            const log = (...a) => {
                debugBox.textContent += a.join(' ') + '\n';
                debugBox.scrollTop = debugBox.scrollHeight;
            };

            // ---- UI and Permission Flow ----

            function updateUI(step) {
                log(`[updateUI] Changing step to: ${step}`);
                if (step === 'location') {
                    mainUI.classList.remove('hidden');
                    videoContainer.classList.add('hidden');
                    statusMessage.textContent = 'Get your location to start.';
                    mainButton.textContent = 'Get Location';
                    mainButton.onclick = requestGeolocation;
                } else if (step === 'camera') {
                    mainUI.classList.remove('hidden');
                    videoContainer.classList.add('hidden');
                    statusMessage.textContent = 'Location found! Now, grant camera access.';
                    mainButton.textContent = 'Get Camera Permission';
                    mainButton.onclick = requestCamera;
                } else if (step === 'gyro') {
                    mainUI.classList.remove('hidden');
                    videoContainer.classList.add('hidden');
                    statusMessage.textContent = 'Last step! Enable device motion for AR.';
                    mainButton.textContent = 'Enable Device Motion';
                    mainButton.onclick = requestGyroscope;
                } else if (step === 'ar') {
                    log('[AR] Now displaying video and AR elements.');
                    mainUI.classList.add('hidden');
                    videoContainer.classList.remove('hidden');
                    calculateSunPath();
                    startArLoop();
                }
            }

            // Show a custom message box instead of alert
            function showMessage(message) {
                messageText.textContent = message;
                messageBox.style.display = 'flex';
                closeMessageButton.onclick = () => {
                    messageBox.style.display = 'none';
                };
            }

            // Request Geolocation permission (Step 1)
            function requestGeolocation() {
                log('[click] requesting geolocation…');
                if ('permissions' in navigator) {
                    navigator.permissions.query({ name: 'geolocation' })
                        .then(p => log('permissions.state =', p.state))
                        .catch(()=>{});
                }
                navigator.geolocation.getCurrentPosition(
                    (pos) => {
                        latitude = pos.coords.latitude;
                        longitude = pos.coords.longitude;
                        log('✅ success location', pos.coords);
                        updateUI('camera');
                    },
                    (err) => {
                        log('❌ error code', err.code, err.message);
                        showMessage(`Error: ${err.message}. Please enable location services.`);
                    },
                    { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
                );
            }

            // Request Camera permission (Step 2)
            async function requestCamera() {
                log('[click] requesting camera…');
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({
                        video: {
                            facingMode: 'environment',
                            width: { ideal: 1280 },
                            height: { ideal: 720 }
                        }
                    });
                    videoElement.srcObject = stream;
                    videoElement.play();
                    videoElement.onloadedmetadata = () => {
                        canvasElement.width = videoElement.videoWidth;
                        canvasElement.height = videoElement.videoHeight;
                    };
                    log('✅ success camera');
                    updateUI('gyro');
                } catch (err) {
                    log('❌ error camera:', err.name, err.message);
                    showMessage(`Error: ${err.message}. Please allow camera access.`);
                }
            }

            // Request Gyroscope permission (Step 3)
            function requestGyroscope() {
                log('[click] requesting gyroscope…');
                if (!window.DeviceOrientationEvent) {
                    log('❌ error gyroscope: Not supported');
                    showMessage("Your device does not support the necessary motion sensors for this AR application.");
                    return;
                }

                const handleOrientation = (event) => {
                    if (event.alpha !== null && event.beta !== null) {
                        heading = event.alpha;
                        pitch = event.beta;
                    }
                };

                if (typeof DeviceOrientationEvent.requestPermission === 'function') {
                    DeviceOrientationEvent.requestPermission()
                        .then(permissionState => {
                            if (permissionState === 'granted') {
                                window.addEventListener('deviceorientation', handleOrientation);
                                log('✅ success gyroscope');
                                updateUI('ar');
                            } else {
                                log('❌ error gyroscope: Permission denied');
                                showMessage("Device motion permission denied. Please enable it in your browser settings.");
                            }
                        })
                        .catch(error => {
                            log('❌ error gyroscope:', error);
                            showMessage("There was an error requesting device motion. Please try again.");
                        });
                } else {
                    // Non-iOS browsers, permission is not needed, so assume success
                    window.addEventListener('deviceorientation', handleOrientation);
                    log('✅ success gyroscope (no permission prompt needed)');
                    updateUI('ar');
                }
            }

            // ---- Sun Path Calculation and AR Loop ----

            function calculateSunPath() {
                log('[SunPath] Calculating sun path for the day...');
                // The library is now embedded, so we can use it directly.
                sunPathPoints = [];
                const now = new Date();
                const times = SunCalc.getTimes(now, latitude, longitude);
                const sunTimes = ['sunrise', 'sunriseEnd', 'goldenHourEnd', 'solarNoon', 'goldenHour', 'sunsetStart', 'sunset'];
                
                // Calculate sun position every 15 minutes for a full day
                for (let i = 0; i < 24 * 60; i += 15) {
                    const time = new Date(now.getTime() + i * 60 * 1000);
                    const pos = SunCalc.getSunPosition(time, latitude, longitude);
                    
                    const azimuthDeg = (pos.azimuth * 180 / Math.PI + 360) % 360;
                    const altitudeDeg = pos.altitude * 180 / Math.PI;

                    if (altitudeDeg > -10) { // Only track when the sun is not too far below the horizon
                        const isMajorPoint = sunTimes.some(t => {
                            const majorTime = times[t];
                            if (!majorTime) return false;
                            // Check if within a 15-minute window of a major event
                            const diff = Math.abs(time.getTime() - majorTime.getTime());
                            return diff < 15 * 60 * 1000;
                        });
                        sunPathPoints.push({
                            azimuth: azimuthDeg,
                            altitude: altitudeDeg,
                            time: time,
                            isMajor: isMajorPoint
                        });
                    }
                }
                log('[SunPath] Done calculating path.');
            }

            function startArLoop() {
                const draw = () => {
                    // Draw the camera feed
                    ctx.drawImage(videoElement, 0, 0, canvasElement.width, canvasElement.height);
                    
                    const halfFOV_H = horizontalFOV / 2;
                    const halfFOV_V = verticalFOV / 2;

                    // Draw the horizon line
                    const horizonRelativeAltitude = 0 - pitch;
                    if (Math.abs(horizonRelativeAltitude) < halfFOV_V) {
                        const horizonY = (-horizonRelativeAltitude + halfFOV_V) / (halfFOV_V * 2) * canvasElement.height;
                        ctx.strokeStyle = 'rgba(255, 255, 255, 0.7)';
                        ctx.lineWidth = 2;
                        ctx.beginPath();
                        ctx.moveTo(0, horizonY);
                        ctx.lineTo(canvasElement.width, horizonY);
                        ctx.stroke();
                    }

                    // Draw the sun path points
                    sunPathPoints.forEach(point => {
                        let relativeAzimuth = point.azimuth - heading;
                        if (relativeAzimuth > 180) relativeAzimuth -= 360;
                        if (relativeAzimuth < -180) relativeAzimuth += 360;

                        let relativeAltitude = point.altitude - pitch;
                        
                        if (Math.abs(relativeAzimuth) < halfFOV_H && Math.abs(relativeAltitude) < halfFOV_V) {
                            const x = (relativeAzimuth + halfFOV_H) / (halfFOV_H * 2) * canvasElement.width;
                            const y = (-relativeAltitude + halfFOV_V) / (halfFOV_V * 2) * canvasElement.height;
                            
                            ctx.fillStyle = point.isMajor ? 'yellow' : 'rgba(255, 255, 255, 0.5)';
                            ctx.beginPath();
                            ctx.arc(x, y, point.isMajor ? 6 : 3, 0, 2 * Math.PI);
                            ctx.fill();

                            if (point.isMajor) {
                                ctx.font = "10px sans-serif";
                                ctx.fillStyle = "white";
                                ctx.fillText(point.time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }), x + 8, y);
                            }
                        }
                    });

                    // Highlight the current sun position
                    const now = new Date();
                    const currentSunPos = SunCalc.getSunPosition(now, latitude, longitude);
                    const currentSunAzimuth = (currentSunPos.azimuth * 180 / Math.PI + 360) % 360;
                    const currentSunAltitude = currentSunPos.altitude * 180 / Math.PI;

                    let currentRelativeAzimuth = currentSunAzimuth - heading;
                    if (currentRelativeAzimuth > 180) currentRelativeAzimuth -= 360;
                    if (currentRelativeAzimuth < -180) currentRelativeAzimuth += 360;

                    let currentRelativeAltitude = currentSunAltitude - pitch;

                    if (Math.abs(currentRelativeAzimuth) < halfFOV_H && Math.abs(currentRelativeAltitude) < halfFOV_V) {
                        const x = (currentRelativeAzimuth + halfFOV_H) / (halfFOV_H * 2) * canvasElement.width;
                        const y = (-currentRelativeAltitude + halfFOV_V) / (halfFOV_V * 2) * canvasElement.height;
                        
                        // Draw a glowing sun icon
                        ctx.fillStyle = 'rgba(255, 200, 0, 1)';
                        ctx.shadowColor = 'rgba(255, 200, 0, 0.7)';
                        ctx.shadowBlur = 15;
                        ctx.beginPath();
                        ctx.arc(x, y, 10, 0, 2 * Math.PI);
                        ctx.fill();
                        ctx.shadowBlur = 0; // Reset shadow for other drawings
                        
                        ctx.font = "14px sans-serif";
                        ctx.fillStyle = "white";
                        ctx.fillText("☀️ Sun", x + 15, y);
                    }
                    
                    requestAnimationFrame(draw);
                };
                requestAnimationFrame(draw);
            }

            // ---- Event Listeners and Initial Setup ----

            mainButton.onclick = () => updateUI('location'); // Initial button click starts the process

            // Debug Toggle Button
            toggleDebugBtn.addEventListener('click', () => {
                const isHidden = debugBox.style.display === 'none';
                debugBox.style.display = isHidden ? 'block' : 'none';
                debugArrow.textContent = isHidden ? '▼' : '▲';
            });
            
            // Initial debug messages
            log('location.origin =', location.origin);
            log('isSecureContext =', isSecureContext);
            if ('permissions' in navigator) {
                navigator.permissions.query({ name: 'geolocation' })
                    .then(p => log('permissions.state =', p.state))
                    .catch(()=>{});
            }

            // Initial UI update
            updateUI('location');
        };
    </script>
</body>
</html>
