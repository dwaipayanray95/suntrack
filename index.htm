<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SunTrack AR</title>
    <!-- Use Tailwind CSS for easy and responsive styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts for Poppins -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1f2937;
            color: #d1d5db;
        }
        #app-name {
            font-family: 'Poppins', sans-serif;
        }
        .debug-container {
            position: fixed;
            bottom: 0;
            left: 0;
            max-height: 40vh;
            width: 100%;
            overflow: auto;
            background-color: #111;
            color: #8cf;
            padding: 1rem;
            font-size: 0.75rem;
            white-space: pre-wrap;
            z-index: 9999;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            display: none; /* Initially hidden */
        }
        #toggle-debug-btn {
            position: fixed;
            bottom: 40vh;
            right: 1rem;
            z-index: 10000;
            background-color: #111;
            color: #8cf;
            padding: 8px 12px;
            font-size: 12px;
            border-radius: 8px 8px 0 0;
            cursor: pointer;
            border: none;
        }
        #video-container {
            position: relative;
            width: 100%;
            height: 100vh;
            display: none;
        }
        #videoElement, #canvasElement {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        #canvasElement {
            z-index: 10;
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">
    <!-- Main UI for permission requests -->
    <div id="main-ui" class="bg-gray-800 p-8 rounded-xl shadow-lg text-center max-w-sm w-full">
        <h1 id="app-name" class="text-3xl font-bold mb-4">SunTrack</h1>
        <p class="text-gray-400 mb-6" id="status-message">
            Get your location to start.
        </p>
        <button id="main-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200 shadow-md">
            Get Location
        </button>
    </div>

    <!-- Video and Canvas for the AR effect -->
    <div id="video-container" class="hidden">
        <video id="videoElement" playsinline autoplay muted></video>
        <canvas id="canvasElement"></canvas>
    </div>

    <!-- Error/Info Message Box -->
    <div id="messageBox" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center p-4 z-50">
        <div class="bg-white rounded-lg shadow-lg p-6 max-w-sm w-full text-center">
            <p id="messageText" class="text-gray-800 text-lg"></p>
            <button id="closeMessage" class="mt-4 bg-gray-800 text-white py-2 px-4 rounded-full hover:bg-gray-700 transition-colors">Close</button>
        </div>
    </div>

    <!-- Debug Toggle Button -->
    <button id="toggle-debug-btn" class="font-mono">
        <span id="debug-arrow">▲</span> Debug
    </button>
    
    <!-- Debug Console Box -->
    <pre id="debug-box" class="debug-container">
        [debug]
    </pre>

    <!-- SunCalc library for sun position calculation -->
    <script src="https://cdn.jsdelivr.net/npm/suncalc@1.8.0/suncalc.min.js"></script>

    <script>
        // Use window.onload to ensure all scripts are loaded before starting
        window.onload = function() {
            // Get DOM elements
            const mainUI = document.getElementById('main-ui');
            const videoContainer = document.getElementById('video-container');
            const statusMessage = document.getElementById('status-message');
            const mainButton = document.getElementById('main-btn');
            const videoElement = document.getElementById('videoElement');
            const canvasElement = document.getElementById('canvasElement');
            const ctx = canvasElement.getContext('2d');
            const messageBox = document.getElementById('messageBox');
            const messageText = document.getElementById('messageText');
            const closeMessageButton = document.getElementById('closeMessage');
            const debugBox = document.getElementById('debug-box');
            const toggleDebugBtn = document.getElementById('toggle-debug-btn');
            const debugArrow = document.getElementById('debug-arrow');

            // Global variables for sensor data and sun path
            let latitude = null;
            let longitude = null;
            let heading = 0; // Device heading (alpha)
            let pitch = 0; // Device tilt (beta)
            const horizontalFOV = 60;
            const verticalFOV = 45;
            let sunPathPoints = [];

            // Debug log function
            const log = (...a) => {
                debugBox.textContent += a.join(' ') + '\n';
                debugBox.scrollTop = debugBox.scrollHeight;
            };

            // ---- UI and Permission Flow ----

            function updateUI(step) {
                log(`[updateUI] Changing step to: ${step}`);
                if (step === 'location') {
                    mainUI.classList.remove('hidden');
                    videoContainer.classList.add('hidden');
                    statusMessage.textContent = 'Get your location to start.';
                    mainButton.textContent = 'Get Location';
                    mainButton.onclick = requestGeolocation;
                } else if (step === 'camera') {
                    mainUI.classList.remove('hidden');
                    videoContainer.classList.add('hidden');
                    statusMessage.textContent = 'Location found! Now, grant camera access.';
                    mainButton.textContent = 'Get Camera Permission';
                    mainButton.onclick = requestCamera;
                } else if (step === 'gyro') {
                    mainUI.classList.remove('hidden');
                    videoContainer.classList.add('hidden');
                    statusMessage.textContent = 'Last step! Enable device motion for AR.';
                    mainButton.textContent = 'Enable Device Motion';
                    mainButton.onclick = requestGyroscope;
                } else if (step === 'ar') {
                    mainUI.classList.add('hidden');
                    videoContainer.classList.remove('hidden');
                    calculateSunPath();
                    startArLoop();
                }
            }

            // Show a custom message box instead of alert
            function showMessage(message) {
                messageText.textContent = message;
                messageBox.style.display = 'flex';
                closeMessageButton.onclick = () => {
                    messageBox.style.display = 'none';
                };
            }

            // Request Geolocation permission (Step 1)
            function requestGeolocation() {
                log('[click] requesting geolocation…');
                if ('permissions' in navigator) {
                    navigator.permissions.query({ name: 'geolocation' })
                        .then(p => log('permissions.state =', p.state))
                        .catch(()=>{});
                }
                navigator.geolocation.getCurrentPosition(
                    (pos) => {
                        latitude = pos.coords.latitude;
                        longitude = pos.coords.longitude;
                        log('✅ success location', pos.coords);
                        updateUI('camera');
                    },
                    (err) => {
                        log('❌ error code', err.code, err.message);
                        showMessage(`Error: ${err.message}. Please enable location services.`);
                    },
                    { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
                );
            }

            // Request Camera permission (Step 2)
            async function requestCamera() {
                log('[click] requesting camera…');
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({
                        video: {
                            facingMode: 'environment',
                            width: { ideal: 1280 },
                            height: { ideal: 720 }
                        }
                    });
                    videoElement.srcObject = stream;
                    videoElement.play();
                    videoElement.onloadedmetadata = () => {
                        canvasElement.width = videoElement.videoWidth;
                        canvasElement.height = videoElement.videoHeight;
                    };
                    log('✅ success camera');
                    updateUI('gyro');
                } catch (err) {
                    log('❌ error camera:', err.name, err.message);
                    showMessage(`Error: ${err.message}. Please allow camera access.`);
                }
            }

            // Request Gyroscope permission (Step 3)
            function requestGyroscope() {
                log('[click] requesting gyroscope…');
                if (!window.DeviceOrientationEvent) {
                    log('❌ error gyroscope: Not supported');
                    showMessage("Your device does not support the necessary motion sensors for this AR application.");
                    return;
                }

                const handleOrientation = (event) => {
                    if (event.alpha !== null && event.beta !== null) {
                        heading = event.alpha;
                        pitch = event.beta;
                    }
                };

                if (typeof DeviceOrientationEvent.requestPermission === 'function') {
                    DeviceOrientationEvent.requestPermission()
                        .then(permissionState => {
                            if (permissionState === 'granted') {
                                window.addEventListener('deviceorientation', handleOrientation);
                                log('✅ success gyroscope');
                                updateUI('ar');
                            } else {
                                log('❌ error gyroscope: Permission denied');
                                showMessage("Device motion permission denied. Please enable it in your browser settings.");
                            }
                        })
                        .catch(error => {
                            log('❌ error gyroscope:', error);
                            showMessage("There was an error requesting device motion. Please try again.");
                        });
                } else {
                    // Non-iOS browsers, permission is not needed, so assume success
                    window.addEventListener('deviceorientation', handleOrientation);
                    log('✅ success gyroscope (no permission prompt needed)');
                    updateUI('ar');
                }
            }

            // ---- Sun Path Calculation and AR Loop ----

            function calculateSunPath() {
                log('[SunPath] Calculating sun path for the day...');
                // Ensure SunCalc library is available before proceeding
                if (typeof SunCalc === 'undefined') {
                    log('❌ error SunCalc: Library not loaded. Check script tag.');
                    showMessage('The SunCalc library could not be loaded. Please check your internet connection.');
                    return;
                }

                sunPathPoints = [];
                const now = new Date();
                const times = SunCalc.getTimes(now, latitude, longitude);
                const sunTimes = ['sunrise', 'sunriseEnd', 'goldenHourEnd', 'solarNoon', 'goldenHour', 'sunsetStart', 'sunset'];
                
                // Calculate sun position every 15 minutes for a full day
                for (let i = 0; i < 24 * 60; i += 15) {
                    const time = new Date(now.getTime() + i * 60 * 1000);
                    const pos = SunCalc.getSunPosition(time, latitude, longitude);
                    
                    const azimuthDeg = (pos.azimuth * 180 / Math.PI + 360) % 360;
                    const altitudeDeg = pos.altitude * 180 / Math.PI;

                    if (altitudeDeg > -10) { // Only track when the sun is not too far below the horizon
                        const isMajorPoint = sunTimes.some(t => {
                            const majorTime = times[t];
                            if (!majorTime) return false;
                            // Check if within a 15-minute window of a major event
                            const diff = Math.abs(time.getTime() - majorTime.getTime());
                            return diff < 15 * 60 * 1000;
                        });
                        sunPathPoints.push({
                            azimuth: azimuthDeg,
                            altitude: altitudeDeg,
                            time: time,
                            isMajor: isMajorPoint
                        });
                    }
                }
                log('[SunPath] Done calculating path.');
            }

            function startArLoop() {
                const draw = () => {
                    // Draw the camera feed
                    ctx.drawImage(videoElement, 0, 0, canvasElement.width, canvasElement.height);
                    
                    const halfFOV_H = horizontalFOV / 2;
                    const halfFOV_V = verticalFOV / 2;

                    // Draw the horizon line
                    const horizonRelativeAltitude = 0 - pitch;
                    if (Math.abs(horizonRelativeAltitude) < halfFOV_V) {
                        const horizonY = (-horizonRelativeAltitude + halfFOV_V) / (halfFOV_V * 2) * canvasElement.height;
                        ctx.strokeStyle = 'rgba(255, 255, 255, 0.7)';
                        ctx.lineWidth = 2;
                        ctx.beginPath();
                        ctx.moveTo(0, horizonY);
                        ctx.lineTo(canvasElement.width, horizonY);
                        ctx.stroke();
                    }

                    // Draw the sun path points
                    sunPathPoints.forEach(point => {
                        let relativeAzimuth = point.azimuth - heading;
                        if (relativeAzimuth > 180) relativeAzimuth -= 360;
                        if (relativeAzimuth < -180) relativeAzimuth += 360;

                        let relativeAltitude = point.altitude - pitch;
                        
                        if (Math.abs(relativeAzimuth) < halfFOV_H && Math.abs(relativeAltitude) < halfFOV_V) {
                            const x = (relativeAzimuth + halfFOV_H) / (halfFOV_H * 2) * canvasElement.width;
                            const y = (-relativeAltitude + halfFOV_V) / (halfFOV_V * 2) * canvasElement.height;
                            
                            ctx.fillStyle = point.isMajor ? 'yellow' : 'rgba(255, 255, 255, 0.5)';
                            ctx.beginPath();
                            ctx.arc(x, y, point.isMajor ? 6 : 3, 0, 2 * Math.PI);
                            ctx.fill();

                            if (point.isMajor) {
                                ctx.font = "10px sans-serif";
                                ctx.fillStyle = "white";
                                ctx.fillText(point.time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }), x + 8, y);
                            }
                        }
                    });

                    // Highlight the current sun position
                    const now = new Date();
                    const currentSunPos = SunCalc.getSunPosition(now, latitude, longitude);
                    const currentSunAzimuth = (currentSunPos.azimuth * 180 / Math.PI + 360) % 360;
                    const currentSunAltitude = currentSunPos.altitude * 180 / Math.PI;

                    let currentRelativeAzimuth = currentSunAzimuth - heading;
                    if (currentRelativeAzimuth > 180) currentRelativeAzimuth -= 360;
                    if (currentRelativeAzimuth < -180) currentRelativeAzimuth += 360;

                    let currentRelativeAltitude = currentSunAltitude - pitch;

                    if (Math.abs(currentRelativeAzimuth) < halfFOV_H && Math.abs(currentRelativeAltitude) < halfFOV_V) {
                        const x = (currentRelativeAzimuth + halfFOV_H) / (halfFOV_H * 2) * canvasElement.width;
                        const y = (-currentRelativeAltitude + halfFOV_V) / (halfFOV_V * 2) * canvasElement.height;
                        
                        // Draw a glowing sun icon
                        ctx.fillStyle = 'rgba(255, 200, 0, 1)';
                        ctx.shadowColor = 'rgba(255, 200, 0, 0.7)';
                        ctx.shadowBlur = 15;
                        ctx.beginPath();
                        ctx.arc(x, y, 10, 0, 2 * Math.PI);
                        ctx.fill();
                        ctx.shadowBlur = 0; // Reset shadow for other drawings
                        
                        ctx.font = "14px sans-serif";
                        ctx.fillStyle = "white";
                        ctx.fillText("☀️ Sun", x + 15, y);
                    }
                    
                    requestAnimationFrame(draw);
                };
                requestAnimationFrame(draw);
            }

            // ---- Event Listeners and Initial Setup ----

            mainButton.onclick = () => updateUI('location'); // Initial button click starts the process

            // Debug Toggle Button
            toggleDebugBtn.addEventListener('click', () => {
                const isHidden = debugBox.style.display === 'none';
                debugBox.style.display = isHidden ? 'block' : 'none';
                debugArrow.textContent = isHidden ? '▼' : '▲';
            });
            
            // Initial debug messages
            log('location.origin =', location.origin);
            log('isSecureContext =', isSecureContext);
            if ('permissions' in navigator) {
                navigator.permissions.query({ name: 'geolocation' })
                    .then(p => log('permissions.state =', p.state))
                    .catch(()=>{});
            }

            // Initial UI update
            updateUI('location');
        };
    </script>
</body>
</html>
