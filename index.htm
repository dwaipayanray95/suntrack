<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover">
  <title>SunTrack AR ‚Ä¢ Simplified</title>
  <style>
    html, body {
      margin: 0; padding: 0;
      width: 100%; height: 100%;
      padding-top: env(safe-area-inset-top);
      padding-bottom: env(safe-area-inset-bottom);
      overflow: hidden;
      background: #000; color: #fff;
      font-family: sans-serif;
    }
    video, canvas {
      position: absolute; top: 0; left: 0;
      width: 100%; height: 100%;
      object-fit: cover;
    }
    video { z-index: 0; }
    canvas { z-index: 1; }
    #debug {
      position: fixed; top: env(safe-area-inset-top); left: 0; right: 0;
      height: 120px; margin: 0; padding: 6px;
      background: rgba(0,0,0,0.8); color: #0f8;
      font-family: monospace; font-size: 12px;
      overflow-y: auto; z-index: 3;
    }
    #controls {
      position: fixed; bottom: env(safe-area-inset-bottom); left: 0; right: 0;
      display: flex; gap: 4px; padding: 6px;
      background: rgba(0,0,0,0.7); z-index: 3;
    }
    #controls button {
      flex: 1; padding: 8px; font-size: 14px;
      background: #222; color: #fff; border: none; border-radius: 4px;
    }
    #controls button:disabled { opacity: 0.4; }
  </style>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/suncalc/1.9.0/suncalc.min.js"></script>
</head>
<body>
  <video id="vid" playsinline autoplay muted></video>
  <canvas id="cv"></canvas>
  <pre id="debug">[ready]\n</pre>
  <div id="controls">
    <button id="btnCam">Start Camera</button>
    <button id="btnGeo" disabled>Get Location</button>
    <button id="btnGyro" disabled>Enable Motion</button>
    <button id="btnAR" disabled>Start AR</button>
    <button id="btnCopy">Copy Logs</button>
  </div>

  <script>
    const vid = document.getElementById('vid');
    const cv  = document.getElementById('cv');
    const dbg = document.getElementById('debug');
    const log = (...a) => { dbg.textContent += a.join(' ') + '\n'; dbg.scrollTop = dbg.scrollHeight; };

    let stream, lat, lng, heading=0, pitch=0;
    let sunPath = [], ctx;

    // 1) Camera
    btnCam.onclick = async () => {
      try {
        stream = await navigator.mediaDevices.getUserMedia({ video:{facingMode:'environment'}, audio:false });
        vid.srcObject = stream;
        log('‚úÖ Camera OK');
        btnGeo.disabled = false;
      } catch(e) {
        log('‚ùå Camera ERR', e.message);
      }
    };

    // 2) Geolocation
    btnGeo.onclick = () => {
      navigator.geolocation.getCurrentPosition(p => {
        lat = p.coords.latitude; lng = p.coords.longitude;
        log('‚úÖ Geo OK', lat.toFixed(4), lng.toFixed(4));
        btnGyro.disabled = false;
      }, e => log('‚ùå Geo ERR', e.message), {enableHighAccuracy:true,timeout:10000});
    };

    // 3) Motion
    function onOri(e) {
      heading = e.webkitCompassHeading!=null ? e.webkitCompassHeading : 360 - e.alpha;
      pitch   = e.beta;
      log(`‚Üª H:${heading.toFixed(1)}¬∞ P:${pitch.toFixed(1)}¬∞`);
    }
    btnGyro.onclick = () => {
      if (DeviceOrientationEvent.requestPermission) {
        DeviceOrientationEvent.requestPermission().then(s => {
          if (s==='granted') {
            window.addEventListener('deviceorientation', onOri);
            log('‚úÖ Gyro OK');
            btnAR.disabled = false;
          } else log('‚ùå Gyro DENIED');
        });
      } else {
        window.addEventListener('deviceorientation', onOri);
        log('‚úÖ Gyro OK');
        btnAR.disabled = false;
      }
    };

    // Map to screen: FOV 60¬∞x40¬∞
    const FOV_H = 60, FOV_V = 40;
    function computeSunPath() {
      sunPath = [];
      const now = new Date();
      for (let i=0;i<96;i++) {
        const t = new Date(now.getFullYear(),now.getMonth(),now.getDate(),0,0,0);
        t.setMinutes(i*15);
        const pos = SunCalc.getPosition(t, lat, lng);
        sunPath.push({ az: (pos.azimuth*180/Math.PI+360)%360, alt: pos.altitude*180/Math.PI });
      }
      log(`üéØ Sun path points: ${sunPath.length}`);
    }

    function draw() {
      ctx.clearRect(0,0,cv.width,cv.height);
      const w=cv.width, h=cv.height;
      // draw sun path
      ctx.strokeStyle='yellow'; ctx.lineWidth=2; ctx.beginPath();
      sunPath.forEach((pt,i)=>{
        let relAz = pt.az - heading;
        if (relAz>180) relAz-=360;
        if (relAz<-180) relAz+=360;
        const relAlt = pt.alt - pitch;
        if (Math.abs(relAz)<=FOV_H/2 && Math.abs(relAlt)<=FOV_V/2) {
          const x = (0.5 + relAz/FOV_H)*w;
          const y = (0.5 - relAlt/FOV_V)*h;
          i===0?ctx.moveTo(x,y):ctx.lineTo(x,y);
        }
      });
      ctx.stroke();
      // draw current sun
      const cur = SunCalc.getPosition(new Date(), lat, lng);
      let az = (cur.azimuth*180/Math.PI+360)%360;
      let alt = cur.altitude*180/Math.PI;
      let relAz = az - heading;
      if (relAz>180) relAz-=360;
      if (relAz<-180) relAz+=360;
      let relAlt = alt - pitch;
      const x = (0.5 + relAz/FOV_H)*w;
      const y = (0.5 - relAlt/FOV_V)*h;
      ctx.fillStyle='orange'; ctx.beginPath(); ctx.arc(x,y,10,0,2*Math.PI); ctx.fill();
      ctx.fillStyle='white'; ctx.textAlign='center';
      ctx.fillText('‚òÄÔ∏è', x, y-12);
      requestAnimationFrame(draw);
    }

    // 4) Start AR
    btnAR.onclick = () => {
      if (!stream||lat==null) { log('‚ùå Missing stream or location'); return; }
      cv.width=vid.videoWidth||innerWidth;
      cv.height=vid.videoHeight||innerHeight;
      ctx = cv.getContext('2d');
      computeSunPath();
      draw();
      log('üéâ AR started');
    };

    // Copy logs
    btnCopy.onclick = async () => {
      await navigator.clipboard.writeText(dbg.textContent);
      log('üìã Logs copied');
    };
  </script>
</body>
</html>
