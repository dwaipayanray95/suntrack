<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover">
  <title>SunTrack AR ‚Ä¢ Path Only w/ Time Labels</title>
  <style>
    html, body {
      margin:0; padding:0;
      width:100%; height:100%;
      overflow:hidden;
      background:#000; color:#fff;
      font-family:sans-serif;
    }
    video, canvas {
      position:absolute; top:0; left:0;
      width:100%; height:100%; object-fit:cover;
    }
    video { z-index:0 }
    canvas { z-index:1 }
    #status {
      position:fixed; top:env(safe-area-inset-top); right:10px;
      background:rgba(0,0,0,0.7); padding:6px 8px;
      border-radius:4px; font-size:14px; z-index:3;
    }
    #debug {
      position:fixed; bottom:env(safe-area-inset-bottom); left:0; right:0;
      max-height:120px; margin:0; padding:6px;
      background:rgba(0,0,0,0.8); color:#0f8;
      font-family:monospace; font-size:12px;
      overflow-y:auto; z-index:3;
    }
    #controls {
      position:fixed; bottom:calc(env(safe-area-inset-bottom)+130px);
      left:0; right:0; display:flex; gap:4px; padding:6px;
      background:rgba(0,0,0,0.7); z-index:3;
    }
    #controls button {
      flex:1; padding:8px; font-size:14px;
      background:#222; color:#fff; border:none; border-radius:4px;
      cursor:pointer;
    }
    #controls button:disabled { opacity:0.4 }
  </style>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/suncalc/1.9.0/suncalc.min.js"></script>
</head>
<body>
  <video id="vid" playsinline autoplay muted></video>
  <canvas id="cv"></canvas>
  <div id="status">Ready</div>
  <pre id="debug">[ready]\n</pre>
  <div id="controls">
    <button id="btnCam">Start Camera</button>
    <button id="btnGeo" disabled>Get Location</button>
    <button id="btnGyro" disabled>Enable Motion</button>
    <button id="btnAR" disabled>Start AR</button>
    <button id="btnCopy">Copy Logs</button>
  </div>

  <script>
    const vid    = document.getElementById('vid'),
          cv     = document.getElementById('cv'),
          status = document.getElementById('status'),
          dbg    = document.getElementById('debug'),
          btnCam = document.getElementById('btnCam'),
          btnGeo = document.getElementById('btnGeo'),
          btnGyro= document.getElementById('btnGyro'),
          btnAR  = document.getElementById('btnAR'),
          btnCopy= document.getElementById('btnCopy'),
          log    = (...m)=>{ dbg.textContent+=m.join(' ')+'\n'; dbg.scrollTop=dbg.scrollHeight; };

    let stream, lat=null, lng=null;
    let rawH=0, rawP=0, smoothH=0, smoothP=0;
    const SMOOTH = 0.12,
          HFOV   = 65; // iPhone 15 wide approx
    let sunPath=[], ctx, raf;

    // 1) Camera
    btnCam.addEventListener('click', async ()=>{
      try {
        status.textContent = 'Opening camera‚Ä¶';
        stream = await navigator.mediaDevices.getUserMedia({ video:{ facingMode:'environment' }, audio:false });
        vid.srcObject = stream;
        await vid.play();
        status.textContent = 'Camera OK';
        log('‚úÖ Camera OK');
        btnGeo.disabled = false;
      } catch(e) {
        status.textContent = 'Camera error';
        log('‚ùå Camera ERR', e.message);
      }
    });

    // 2) Geolocation
    btnGeo.addEventListener('click', ()=>{
      status.textContent = 'Getting location‚Ä¶';
      navigator.geolocation.getCurrentPosition(p=>{
        lat = p.coords.latitude; lng = p.coords.longitude;
        status.textContent = 'Location OK';
        log('‚úÖ Geo OK', lat.toFixed(5), lng.toFixed(5));
        btnGyro.disabled = false;
      }, e=>{
        status.textContent = 'Location error';
        log('‚ùå Geo ERR', e.message);
      }, { enableHighAccuracy:true, timeout:10000 });
    });

    // 3) Orientation smoothing
    function onOri(e){
      const h = e.webkitCompassHeading != null ? e.webkitCompassHeading : 360 - e.alpha;
      const p = e.beta - 90;
      rawH = h; rawP = p;
      smoothH = smoothH*(1-SMOOTH)+rawH*SMOOTH;
      smoothP = smoothP*(1-SMOOTH)+rawP*SMOOTH;
      status.textContent = `H:${smoothH.toFixed(1)}¬∞ P:${smoothP.toFixed(1)}¬∞`;
      if(!onOri.last||Date.now()-onOri.last>800){
        log('‚Üª H:',smoothH.toFixed(1)+'¬∞','P:',smoothP.toFixed(1)+'¬∞');
        onOri.last = Date.now();
      }
    }
    btnGyro.addEventListener('click', ()=>{
      status.textContent = 'Enabling motion‚Ä¶';
      if(DeviceOrientationEvent.requestPermission){
        DeviceOrientationEvent.requestPermission().then(s=>{
          if(s==='granted'){
            window.addEventListener('deviceorientation', onOri);
            status.textContent='Motion OK';
            log('‚úÖ Gyro OK');
            btnAR.disabled = false;
          } else {
            status.textContent='Motion denied';
            log('‚ùå Gyro DENIED');
          }
        }).catch(e=>{
          status.textContent='Motion error';
          log('‚ùå Gyro ERR',e);
        });
      } else {
        window.addEventListener('deviceorientation', onOri);
        status.textContent='Motion OK';
        log('‚úÖ Gyro OK');
        btnAR.disabled = false;
      }
    });

    // compute sun path with timestamps
    function computeSunPath(){
      sunPath = [];
      const now = new Date();
      for(let i=0;i<96;i++){
        const t = new Date(now.getFullYear(),now.getMonth(),now.getDate());
        t.setMinutes(i*15);
        const pos = SunCalc.getPosition(t, lat, lng);
        sunPath.push({
          az  : (pos.azimuth*180/Math.PI+360)%360,
          alt : pos.altitude*180/Math.PI,
          time: t
        });
      }
      log('üéØ Sun path pts:',sunPath.length);
    }

    // draw overlay path + time labels
    function draw(){
      ctx.clearRect(0,0,cv.width,cv.height);
      const w = cv.width, h = cv.height;
      // derive VFOV from HFOV & aspect
      const vFOV = 2*Math.atan(Math.tan((HFOV/2)*Math.PI/180)*(h/w))*180/Math.PI;
      const halfH = HFOV/2, halfV = vFOV/2;

      // horizon line
      const y0 = (0.5 - (-smoothP)/halfV)*h;
      ctx.strokeStyle='white'; ctx.lineWidth=2;
      ctx.beginPath(); ctx.moveTo(0,y0); ctx.lineTo(w,y0); ctx.stroke();

      // sun path
      ctx.strokeStyle='yellow'; ctx.lineWidth=2; ctx.beginPath();
      sunPath.forEach((pt,i)=>{
        let rAz = pt.az - smoothH;
        if(rAz>180) rAz-=360; if(rAz<-180) rAz+=360;
        let rAlt = pt.alt - smoothP;
        if(Math.abs(rAz)<=halfH && Math.abs(rAlt)<=halfV){
          const x = (0.5 + rAz/HFOV)*w;
          const y = (0.5 - rAlt/vFOV)*h;
          i===0?ctx.moveTo(x,y):ctx.lineTo(x,y);
        }
      });
      ctx.stroke();

      // time labels every hour
      ctx.fillStyle='white'; ctx.font='bold 12px sans-serif'; ctx.textAlign='center';
      sunPath.forEach(pt=>{
        if(pt.time.getMinutes()===0){
          let rAz = pt.az - smoothH;
          if(rAz>180) rAz-=360; if(rAz<-180) rAz+=360;
          let rAlt = pt.alt - smoothP;
          if(Math.abs(rAz)<=halfH && Math.abs(rAlt)<=halfV){
            const x = (0.5 + rAz/HFOV)*w;
            const y = (0.5 - rAlt/vFOV)*h;
            ctx.fillText(`${pt.time.getHours()}:00`, x, y - 8);
          }
        }
      });

      raf = requestAnimationFrame(draw);
    }

    // 4) Start AR
    btnAR.addEventListener('click', ()=>{
      if(!stream||lat===null){
        log('‚ùå Missing prerequisites'); return;
      }
      status.textContent='Starting AR';
      cv.width = vid.videoWidth||innerWidth;
      cv.height= vid.videoHeight||innerHeight;
      ctx = cv.getContext('2d');
      computeSunPath();
      if(raf) cancelAnimationFrame(raf);
      draw();
      status.textContent='AR Active';
      log('üéâ AR started');
    });

    // copy logs
    btnCopy.addEventListener('click', async ()=>{
      await navigator.clipboard.writeText(dbg.textContent);
      log('üìã Logs copied');
    });

    // cleanup
    window.addEventListener('beforeunload', ()=>{
      if(stream) stream.getTracks().forEach(t=>t.stop());
      if(raf) cancelAnimationFrame(raf);
    });
  </script>
</body>
</html>
