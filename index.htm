<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover" />
  <title>SunTrack AR - Fixed</title>
  <style>
    /* Safe‚Äêarea / layout */
    html, body {
      margin: 0; padding: 0;
      width: 100%; height: 100%;
      padding-top: env(safe-area-inset-top);
      padding-bottom: env(safe-area-inset-bottom);
      overflow: hidden;
      background: #000; color: #fff;
      font-family: system-ui, sans-serif;
    }
    video {
      position: absolute; top: 0; left: 0;
      width: 100%; height: 100%; object-fit: cover;
      z-index: 1;
    }
    canvas#cv {
      position: absolute; top: 0; left: 0;
      width: 100%; height: 100%; object-fit: cover;
      z-index: 2;
    }
    /* Debug pane at top */
    #debug {
      position: fixed; top: env(safe-area-inset-top); left: 0; right: 0;
      height: 140px; background: rgba(0,0,0,0.8);
      color: #0f8; font-family: monospace; font-size: 12px;
      padding: 6px; overflow-y: auto; z-index: 1000;
      box-shadow: 0 2px 8px rgba(0,0,0,0.6);
      margin: 0;
    }
    /* Controls at bottom */
    #controls {
      position: fixed; bottom: env(safe-area-inset-bottom); left: 0; right: 0;
      display: flex; gap: 6px; padding: 8px;
      background: rgba(0,0,0,0.7); z-index: 1000;
    }
    button {
      flex: 1; padding: 10px; font-size: 14px;
      background: #222; color: #fff; border: none; border-radius: 4px;
      cursor: pointer;
    }
    button:disabled { opacity: 0.4; }
    
    /* Calibration mode */
    #calibration {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0,0,0,0.8);
      color: white;
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      z-index: 3000;
      display: none;
    }
    
    /* Orientation indicator */
    #orientation-indicator {
      position: fixed;
      top: 150px;
      right: 20px;
      width: 100px;
      height: 100px;
      z-index: 2000;
      background: rgba(0,0,0,0.5);
      border-radius: 50%;
    }
    .axis {
      position: absolute;
      transform-origin: center;
      background: red;
    }
    .axis-x {
      width: 2px;
      height: 100%;
      left: 50%;
    }
    .axis-y {
      width: 100%;
      height: 2px;
      top: 50%;
    }
    .axis-z {
      width: 100%;
      height: 100%;
      border: 1px dashed #0f8;
      border-radius: 50%;
      box-sizing: border-box;
    }
  </style>
</head>
<body>

  <video id="vid" playsinline autoplay muted></video>
  <canvas id="cv"></canvas>
  
  <div id="orientation-indicator">
    <div class="axis axis-x"></div>
    <div class="axis axis-y"></div>
    <div class="axis axis-z"></div>
  </div>

  <pre id="debug">[ready]\n</pre>

  <div id="controls">
    <button id="btnCam">Start Camera</button>
    <button id="btnGeo" disabled>Get Location</button>
    <button id="btnGyro" disabled>Enable Motion</button>
    <button id="btnAR" disabled>Start AR</button>
    <button id="btnCalibrate">Calibrate</button>
    <button id="btnCopy">Copy Logs</button>
  </div>
  
  <div id="calibration">
    <h2>Calibration Mode</h2>
    <p>Point your device at the actual sun</p>
    <div style="display: flex; gap: 10px; margin-top: 15px;">
      <button id="btnConfirmCal">Confirm</button>
      <button id="btnCancelCal">Cancel</button>
    </div>
  </div>

  <script>
    // ‚Äî‚Äî DOM refs & state ‚Äî‚Äî
    const vid = document.getElementById('vid');
    const cv  = document.getElementById('cv');
    const logEl = document.getElementById('debug');
    const orientationIndicator = document.getElementById('orientation-indicator');
    const calibrationPanel = document.getElementById('calibration');
    let stream, lat, lng, heading, pitch, roll;
    let sunPath = [], ctx2d;
    let calibrationOffset = 0;
    let isCalibrating = false;
    let lastOrientationLog = 0;

    // ‚Äî‚Äî Logging helper ‚Äî‚Äî
    function log(...args) {
      logEl.textContent += args.join(' ') + '\n';
      logEl.scrollTop = logEl.scrollHeight;
    }

    // ‚Äî‚Äî Sun math ‚Äî‚Äî
    const rad = Math.PI/180, toDeg = 180/Math.PI;
    function toDays(date) {
      return date.getTime()/86400000 - 0.5 + 2440588 - 2451545;
    }
    function getSunPosition(date, lat, lng) {
      const lw  = rad*-lng, phi = rad*lat, d = toDays(date);
      const M   = rad*(357.5291 + .98560028*d);
      const C   = rad*(1.9148*Math.sin(M) + .02*Math.sin(2*M) + .0003*Math.sin(3*M));
      const L   = M + C + rad*280.4665;
      const dec = Math.asin(Math.sin(rad*23.44)*Math.sin(L));
      const ra  = Math.atan2(Math.cos(rad*23.44)*Math.sin(L), Math.cos(L));
      const J   = date.getTime()/86400000 + 2440587.5;
      const gst = (J-2451545.0)*.985647362 + 280.460618;
      const ha  = rad*(gst + lng) - ra;
      const alt = Math.asin(Math.sin(phi)*Math.sin(dec) + Math.cos(phi)*Math.cos(dec)*Math.cos(ha));
      const az  = Math.atan2(Math.sin(ha),
                    Math.cos(ha)*Math.sin(phi) - Math.tan(dec)*Math.cos(phi));
      return { azimuth:(az*toDeg+360)%360, altitude:alt*toDeg };
    }

    // ‚Äî‚Äî 1) Camera ‚Äî‚Äî
    document.getElementById('btnCam').onclick = async () => {
      try {
        stream = await navigator.mediaDevices.getUserMedia({
          video:{ 
            facingMode:'environment',
            width: { ideal: 1920 },
            height: { ideal: 1080 }
          }, 
          audio:false
        });
        vid.srcObject = stream;
        
        // Wait for video to load metadata
        await new Promise(resolve => {
          vid.onloadedmetadata = resolve;
        });
        
        log('‚úÖ Camera OK - Dimensions:', vid.videoWidth, 'x', vid.videoHeight);
        document.getElementById('btnGeo').disabled = false;
      } catch (e) {
        log('‚ùå Camera ERR', e.name, e.message);
      }
    };

    // ‚Äî‚Äî 2) Geolocation ‚Äî‚Äî
    document.getElementById('btnGeo').onclick = () => {
      if (!navigator.geolocation) return log('‚ùå No geolocation API');
      navigator.geolocation.getCurrentPosition(pos => {
        lat = pos.coords.latitude; 
        lng = pos.coords.longitude;
        log('‚úÖ Geo OK', lat.toFixed(6), lng.toFixed(6));
        document.getElementById('btnGyro').disabled = false;
      }, err => {
        log('‚ùå Geo ERR', err.code, err.message);
      }, { enableHighAccuracy:true, timeout:10000 });
    };

    // ‚Äî‚Äî 3) Device Motion ‚Äî‚Äî
    function handleOri(e) {
      // Get device orientation with calibration offset
      heading = e.webkitCompassHeading != null
        ? (e.webkitCompassHeading + calibrationOffset) % 360 
        : ((360 - e.alpha) + calibrationOffset) % 360;
      
      pitch = e.beta;
      roll = e.gamma;
      
      // Normalize angles
      if (heading > 180) heading -= 360;
      if (heading < -180) heading += 360;
      if (pitch > 180) pitch -= 360;
      if (pitch < -180) pitch += 360;
      
      // Update orientation indicator
      orientationIndicator.style.transform = `rotate(${-heading}deg)`;
      
      // Throttle logging
      const now = Date.now();
      if (now - lastOrientationLog > 1000) {
        log('‚Üª Motion', 
            'H:', heading.toFixed(1)+'¬∞', 
            'P:', pitch.toFixed(1)+'¬∞', 
            'R:', roll.toFixed(1)+'¬∞');
        lastOrientationLog = now;
      }
    }
    
    document.getElementById('btnGyro').onclick = () => {
      if (typeof DeviceOrientationEvent.requestPermission === 'function') {
        DeviceOrientationEvent.requestPermission().then(state => {
          if (state==='granted') {
            window.addEventListener('deviceorientation', handleOri);
            log('‚úÖ Gyro OK');
            document.getElementById('btnAR').disabled = false;
          } else log('‚ùå Gyro DENIED');
        }).catch(err => log('‚ùå Gyro ERR', err));
      } else {
        window.addEventListener('deviceorientation', handleOri);
        log('‚úÖ Gyro OK (no prompt)');
        document.getElementById('btnAR').disabled = false;
      }
    };
    
    // ‚Äî‚Äî Calibration functions ‚Äî‚Äî
    document.getElementById('btnCalibrate').onclick = () => {
      calibrationPanel.style.display = 'block';
      isCalibrating = true;
      log('üîß Calibration mode started');
    };
    
    document.getElementById('btnConfirmCal').onclick = () => {
      // Calculate offset based on actual sun position
      const now = new Date();
      const sunPos = getSunPosition(now, lat, lng);
      calibrationOffset = (360 - heading - sunPos.azimuth) % 360;
      
      calibrationPanel.style.display = 'none';
      isCalibrating = false;
      log('‚úÖ Calibration complete. Offset:', calibrationOffset.toFixed(1)+'¬∞');
    };
    
    document.getElementById('btnCancelCal').onclick = () => {
      calibrationPanel.style.display = 'none';
      isCalibrating = false;
      log('‚ùå Calibration cancelled');
    };

    // ‚Äî‚Äî Sun path compute ‚Äî‚Äî
    function calculateSunPath() {
      sunPath = [];
      const now = new Date();
      for (let i=0; i<96; i++) {
        const t = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        t.setMinutes(i*15);
        sunPath.push(getSunPosition(t, lat, lng));
      }
      log(`üéØ Sun path: ${sunPath.length} points`);
    }

    // ‚Äî‚Äî AR overlay draw ‚Äî‚Äî
    function drawAR() {
      if (!ctx2d) return;
      
      // Clear canvas
      ctx2d.clearRect(0,0,cv.width,cv.height);
      
      // Field of view settings
      const halfH = 30; // Horizontal FOV half (60¬∞ total)
      const halfV = 22.5; // Vertical FOV half (45¬∞ total)
      
      // Draw horizon line with roll compensation
      if (roll !== undefined && !isCalibrating) {
        const centerY = cv.height / 2;
        const tilt = roll * rad;
        const slope = Math.tan(tilt);
        const intercept = centerY - slope * (cv.width / 2);
        
        ctx2d.strokeStyle='rgba(255,255,255,0.8)'; 
        ctx2d.lineWidth=3;
        ctx2d.beginPath(); 
        ctx2d.moveTo(0, slope * 0 + intercept); 
        ctx2d.lineTo(cv.width, slope * cv.width + intercept); 
        ctx2d.stroke();
        
        // Label the horizon
        ctx2d.fillStyle = "white";
        ctx2d.font = "bold 16px sans-serif";
        ctx2d.textAlign = "center";
        ctx2d.fillText("Horizon", cv.width/2, slope * (cv.width/2) + intercept - 15);
      }
      
      // Draw sun path arc
      if (sunPath.length > 0 && !isCalibrating) {
        ctx2d.strokeStyle='rgba(255,255,0,0.7)'; 
        ctx2d.lineWidth=3;
        ctx2d.beginPath();
        
        sunPath.forEach((pt,i) => {
          let relAz = pt.azimuth - heading;
          if (relAz > 180) relAz -= 360;
          if (relAz < -180) relAz += 360;
          
          let relAlt = pt.altitude - pitch;
          
          // Only draw if within FOV
          if (Math.abs(relAz) <= halfH && Math.abs(relAlt) <= halfV) {
            const x = ((relAz + halfH) / (halfH * 2)) * cv.width;
            const y = ((-relAlt + halfV) / (halfV * 2)) * cv.height;
            
            i === 0 ? ctx2d.moveTo(x, y) : ctx2d.lineTo(x, y);
          }
        });
        
        ctx2d.stroke();
      }
      
      // Draw current sun position
      if (lat !== null && lng !== null && !isCalibrating) {
        const now = new Date();
        const sunPos = getSunPosition(now, lat, lng);
        
        let relAz = sunPos.azimuth - heading;
        if (relAz > 180) relAz -= 360;
        if (relAz < -180) relAz += 360;
        
        let relAlt = sunPos.altitude - pitch;
        
        const sunX = ((relAz + halfH) / (halfH * 2)) * cv.width;
        const sunY = ((-relAlt + halfV) / (halfV * 2)) * cv.height;
        
        // Draw sun with glow effect
        ctx2d.shadowColor = 'rgba(255, 200, 0, 0.7)';
        ctx2d.shadowBlur = 15;
        ctx2d.fillStyle = 'rgba(255, 200, 0, 1)';
        ctx2d.beginPath();
        ctx2d.arc(sunX, sunY, 15, 0, Math.PI * 2);
        ctx2d.fill();
        
        // Reset shadow
        ctx2d.shadowBlur = 0;
        
        // Label the sun
        ctx2d.fillStyle = "white";
        ctx2d.font = "bold 16px sans-serif";
        ctx2d.textAlign = "center";
        ctx2d.fillText("‚òÄÔ∏è Sun", sunX, sunY - 25);
        
        // Log sun position for debugging
        log('‚òÄÔ∏è Sun:', 
            'Azimuth:', sunPos.azimuth.toFixed(1) + '¬∞', 
            'Altitude:', sunPos.altitude.toFixed(1) + '¬∞',
            'Screen:', sunX.toFixed(0), sunY.toFixed(0));
      }
      
      // Draw crosshair for reference
      ctx2d.strokeStyle = 'rgba(255, 0, 0, 0.5)';
      ctx2d.lineWidth = 1;
      ctx2d.beginPath();
      ctx2d.moveTo(cv.width/2, 0);
      ctx2d.lineTo(cv.width/2, cv.height);
      ctx2d.moveTo(0, cv.height/2);
      ctx2d.lineTo(cv.width, cv.height/2);
      ctx2d.stroke();
      
      // Draw center point
      ctx2d.fillStyle = 'red';
      ctx2d.beginPath();
      ctx2d.arc(cv.width/2, cv.height/2, 5, 0, Math.PI*2);
      ctx2d.fill();
      
      requestAnimationFrame(drawAR);
    }

    // ‚Äî‚Äî 4) Start AR ‚Äî‚Äî
    document.getElementById('btnAR').onclick = () => {
      const ok = !!stream && lat != null;
      log(ok ? 'üéâ All set ‚Äî starting AR!' : '‚ùå Missing prerequisites');
      if (!ok) return;
      
      // Set canvas dimensions to match video
      cv.width  = vid.videoWidth || window.innerWidth;
      cv.height = vid.videoHeight || window.innerHeight;
      
      ctx2d = cv.getContext('2d');
      calculateSunPath();
      
      // Start AR rendering loop
      drawAR();
    };

    // ‚Äî‚Äî Copy Logs ‚Äî‚Äî
    document.getElementById('btnCopy').onclick = async () => {
      try {
        await navigator.clipboard.writeText(logEl.textContent);
        log('üìã Logs copied');
      } catch (e) {
        log('‚ùå Copy failed', e);
      }
    };
  </script>
</body>
</html>
