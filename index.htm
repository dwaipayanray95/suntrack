<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover" />
<title>SunTrack AR ‚Ä¢ Full Sunpath</title>
<link rel="preconnect" href="https://cdnjs.cloudflare.com" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/suncalc/1.9.0/suncalc.min.js"></script>
<style>
  :root{ --glass:rgba(18,18,18,.58); --gold:rgba(255,215,0,.95); --night:rgba(200,200,200,.38); }
  html,body{margin:0;height:100%;background:#000;color:#fff;font:14px/1.45 system-ui,-apple-system,Segoe UI,Inter,Roboto,sans-serif;overflow:hidden}
  video,canvas{position:absolute;inset:0;width:100%;height:100%;object-fit:cover}
  video{z-index:0} canvas{z-index:1}

  #status{
    position:fixed; top:calc(env(safe-area-inset-top) + 10px); left:50%; transform:translateX(-50%);
    background:var(--glass); backdrop-filter:saturate(140%) blur(6px);
    border:1px solid rgba(255,255,255,.08); border-radius:999px; padding:8px 14px;
    z-index:3; font-weight:600; font-size:13px; box-shadow:0 4px 18px rgba(0,0,0,.35); white-space:nowrap;
  }
  #controls{
    position:fixed; left:12px; right:12px; bottom:calc(env(safe-area-inset-bottom) + 132px);
    display:flex; gap:8px; z-index:3; background:var(--glass); border:1px solid rgba(255,255,255,.08);
    padding:10px; border-radius:12px; backdrop-filter:saturate(140%) blur(6px); box-shadow:0 8px 24px rgba(0,0,0,.45);
  }
  #controls button{appearance:none;border:0;border-radius:10px;padding:10px 12px;background:#1e1e1e;color:#fff;font-weight:600;letter-spacing:.2px}
  #controls button.primary{background:#2b5cff}
  #controls button:disabled{opacity:.45}
  #brand{position:fixed;left:16px;bottom:calc(env(safe-area-inset-bottom) + 100px);color:#c9c9c9;font-size:11px;opacity:.85;z-index:3;text-shadow:0 1px 10px rgba(0,0,0,.6)}
  #debug{position:fixed;left:0;right:0;bottom:0;height:120px;overflow:auto;margin:0;padding:6px 10px;background:rgba(0,0,0,.84);color:#8cf;font:12px/1.25 ui-monospace,Menlo,Consolas,monospace;z-index:2;white-space:pre;border-top:1px solid rgba(255,255,255,.06)}
</style>
</head>
<body>
  <video id="vid" playsinline autoplay muted></video>
  <canvas id="cv"></canvas>

  <div id="status">Ready</div>
  <div id="brand">o4-mini-high ‚Ä¢ made with GPT-5</div>

  <div id="controls">
    <button id="bCam" class="primary">Start Camera</button>
    <button id="bGeo" disabled>Get Location</button>
    <button id="bGyro" disabled>Enable Motion</button>
    <button id="bAR" disabled>Start AR</button>
    <button id="bCopy">Copy Logs</button>
  </div>
  <pre id="debug">[ready]
</pre>

<script>
const $ = id => document.getElementById(id);
const vid=$('vid'), cv=$('cv'), ctx=cv.getContext('2d');
const statusEl=$('status'), dbg=$('debug');
const log=(...a)=>{ dbg.textContent+=a.join(' ')+'\n'; dbg.scrollTop=dbg.scrollHeight; };

let stream; let lat=null,lng=null;
let rawH=0, rawP=0, smoothH=0, smoothP=0;
const SMOOTH=0.12;
const HFOV=65; // iPhone 15 wide approx
let vFOV=45;
let path=[]; // [{t, azN, azU, alt}]
let raf=null, arActive=false;

const rad2deg=r=>r*180/Math.PI, deg2rad=d=>d*Math.PI/180;
function computeVFOV(){
  const w=cv.width||innerWidth, h=cv.height||innerHeight;
  vFOV = 2*Math.atan(Math.tan(deg2rad(HFOV/2))*(h/w))*180/Math.PI;
}
function sunAzFromNorthCW(azRad){ return (rad2deg(azRad)+180+360)%360; }
function unwrap(seq){
  if(!seq.length) return [];
  const out=[seq[0]];
  for(let i=1;i<seq.length;i++){
    let a=seq[i], p=out[i-1];
    while(a-p>180) a-=360;
    while(a-p<-180) a+=360;
    out.push(a);
  }
  return out;
}
function shortestDelta(a,b){ return ((a-b+540)%360)-180; } // [-180,180)

$('bCam').onclick=async()=>{
  try{
    statusEl.textContent='Opening camera‚Ä¶';
    stream=await navigator.mediaDevices.getUserMedia({video:{facingMode:'environment'},audio:false});
    vid.srcObject=stream; await vid.play();
    cv.width=vid.videoWidth||innerWidth; cv.height=vid.videoHeight||innerHeight;
    computeVFOV();
    statusEl.textContent='Camera OK';
    log('‚úÖ Camera OK', cv.width+'√ó'+cv.height, 'vFOV‚âà', vFOV.toFixed(1));
    $('bGeo').disabled=false;
  }catch(e){ statusEl.textContent='Camera error'; log('‚ùå Camera ERR', e.message); }
};

$('bGeo').onclick=()=>{
  statusEl.textContent='Getting location‚Ä¶';
  navigator.geolocation.getCurrentPosition(p=>{
    lat=p.coords.latitude; lng=p.coords.longitude;
    statusEl.textContent='Location OK';
    log('‚úÖ Geo OK', lat.toFixed(5), lng.toFixed(5));
    $('bGyro').disabled=false;
  },e=>{ statusEl.textContent='Location error'; log('‚ùå Geo ERR', e.message); },
  {enableHighAccuracy:true, timeout:10000});
};

function onOri(e){
  const h=(e.webkitCompassHeading!=null)?e.webkitCompassHeading:(360-(e.alpha||0));
  const p=(e.beta||0)-90;
  rawH=(h+360)%360; rawP=p;
  smoothH=smoothH*(1-SMOOTH)+rawH*SMOOTH;
  smoothP=smoothP*(1-SMOOTH)+rawP*SMOOTH;
  statusEl.textContent=`H:${smoothH.toFixed(1)}¬∞  P:${smoothP.toFixed(1)}¬∞`;
}
$('bGyro').onclick=()=>{
  statusEl.textContent='Enabling motion‚Ä¶';
  if(typeof DeviceOrientationEvent?.requestPermission==='function'){
    DeviceOrientationEvent.requestPermission().then(s=>{
      if(s==='granted'){ addEventListener('deviceorientation', onOri);
        $('bAR').disabled=false; statusEl.textContent='Motion OK'; log('‚úÖ Gyro OK'); }
      else{ statusEl.textContent='Motion denied'; log('‚ùå Gyro DENIED'); }
    }).catch(err=>{ statusEl.textContent='Motion error'; log('‚ùå Gyro ERR', err); });
  }else{
    addEventListener('deviceorientation', onOri);
    $('bAR').disabled=false; statusEl.textContent='Motion OK'; log('‚úÖ Gyro OK (no prompt)');
  }
};

function buildFullPath(){
  path.length=0;
  const now=new Date();
  const start=new Date(now.getFullYear(),now.getMonth(),now.getDate(),0,0,0,0);
  const end=new Date(start); end.setDate(end.getDate()+1);
  const t=new Date(start);
  while(t<=end){
    const pos=SunCalc.getPosition(t,lat,lng);
    path.push({t:new Date(t), azN:sunAzFromNorthCW(pos.azimuth), alt:rad2deg(pos.altitude)});
    t.setMinutes(t.getMinutes()+5);
  }
  const un=unwrap(path.map(p=>p.azN));
  for(let i=0;i<path.length;i++) path[i].azU=un[i];
  log('üéØ 24h path points:', path.length);
}

function draw(){
  const w=cv.width, h=cv.height;
  ctx.clearRect(0,0,w,h);

  // Horizon ‚Äî subtle line (no big fuzzy bar)
  const horizonY = (0.5 - (smoothP / vFOV)) * h;
  ctx.strokeStyle='rgba(255,255,255,.65)'; ctx.lineWidth=2;
  ctx.beginPath(); ctx.moveTo(0,horizonY); ctx.lineTo(w,horizonY); ctx.stroke();

  // FOV helpers
  const halfH=HFOV/2, halfV=vFOV/2;
  const proj=(rAz,rAlt)=>({ x:(0.5 + (rAz/HFOV))*w, y:(0.5 - (rAlt/vFOV))*h,
    vis: Math.abs(rAz)<=halfH*1.1 && Math.abs(rAlt)<=halfV*1.1 });

  function strokeSegment(list, color, dashed){
    if(list.length<2) return;
    ctx.lineWidth=3; ctx.strokeStyle=color; ctx.setLineDash(dashed?[6,6]:[]);
    ctx.beginPath(); let drawing=false; let prevX=null;
    for(const pt of list){
      const rAz = shortestDelta(pt.azN, smoothH); // <<< FIX: relative from wrapped azimuth
      const rAlt= pt.alt - smoothP;
      const p=proj(rAz,rAlt);
      if(!p.vis){ if(drawing){ ctx.stroke(); drawing=false; prevX=null; } continue; }
      if(drawing && prevX!=null && Math.abs(p.x-prevX)>w*0.35){ ctx.stroke(); ctx.beginPath(); drawing=false; }
      if(!drawing){ ctx.moveTo(p.x,p.y); drawing=true; } else { ctx.lineTo(p.x,p.y); }
      prevX=p.x;
    }
    if(drawing) ctx.stroke();
    ctx.setLineDash([]);
  }

  // Split day/night
  const day=[], night=[]; let curD=[], curN=[];
  for(const pt of path){
    if(pt.alt>0){ if(curN.length){ night.push(curN); curN=[]; } curD.push(pt); }
    else{ if(curD.length){ day.push(curD); curD=[]; } curN.push(pt); }
  }
  if(curD.length) day.push(curD); if(curN.length) night.push(curN);

  night.forEach(s=>strokeSegment(s,'var(--night)',true));
  day.forEach(s=>strokeSegment(s,'var(--gold)',false));

  // Hour labels every hour
  ctx.font='bold 12px sans-serif'; ctx.textAlign='center';
  for(const pt of path){
    if(pt.t.getMinutes()!==0) continue;
    const rAz = shortestDelta(pt.azN, smoothH);
    const rAlt= pt.alt - smoothP;
    if(Math.abs(rAz)>halfH || Math.abs(rAlt)>halfV) continue;
    const p=proj(rAz,rAlt); if(!p.vis) continue;
    const label=pt.t.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'});
    ctx.save(); ctx.lineWidth=4; ctx.strokeStyle='rgba(0,0,0,.55)'; ctx.fillStyle='#fff';
    ctx.strokeText(label,p.x,p.y-10); ctx.fillText(label,p.x,p.y-10); ctx.restore();
    ctx.beginPath(); ctx.arc(p.x,p.y,3,0,Math.PI*2); ctx.fillStyle='rgba(255,255,255,.9)'; ctx.fill();
  }

  raf=requestAnimationFrame(draw);
}

$('bAR').onclick=()=>{
  if(arActive) return;
  if(!stream || lat==null){ log('‚ùå Missing prerequisites'); return; }
  cv.width=vid.videoWidth||innerWidth; cv.height=vid.videoHeight||innerHeight;
  computeVFOV();
  buildFullPath();
  if(raf) cancelAnimationFrame(raf);
  draw();
  arActive=true; $('bAR').disabled=true;
  statusEl.textContent='AR Active'; log('üéâ AR started');
};

$('bCopy').onclick=async()=>{ try{ await navigator.clipboard.writeText(dbg.textContent); log('üìã Logs copied'); }catch(e){ log('‚ùå Copy failed', e.message); } };

addEventListener('beforeunload',()=>{ if(stream) stream.getTracks().forEach(t=>t.stop()); if(raf) cancelAnimationFrame(raf); });
</script>
</body>
</html>
