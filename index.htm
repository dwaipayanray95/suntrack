<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover" />
<title>SunTrack AR • Full Sunpath (3D)</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/suncalc/1.9.0/suncalc.min.js"></script>
<style>
  :root{
    --glass: rgba(18,18,18,.58);
    --gold:  rgba(255,215,0,.98);
    --gold2: rgba(255,180,0,.95);
    --night: rgba(200,200,200,.38);
    --ink:   rgba(255,255,255,.92);
    --muted: rgba(255,255,255,.70);
    --edge:  rgba(0,0,0,.55);
  }
  html,body{margin:0;height:100%;background:#000;color:#fff;font:14px/1.45 Inter,system-ui,-apple-system,Segoe UI,Roboto,sans-serif;overflow:hidden}
  video,canvas{position:absolute;inset:0;width:100%;height:100%;object-fit:cover}
  video{z-index:0} canvas{z-index:1}

  /* Topbar */
  #topbar{
    position:fixed; left:12px; right:12px; top:calc(env(safe-area-inset-top) + 10px);
    display:flex; align-items:center; gap:8px; z-index:3;
  }
  .pill{
    background:var(--glass); backdrop-filter:saturate(140%) blur(6px);
    border:1px solid rgba(255,255,255,.08); border-radius:12px;
    padding:8px 12px; font-weight:600; box-shadow:0 4px 18px rgba(0,0,0,.35);
    white-space:nowrap;
  }
  #compass{display:flex; gap:10px; align-items:center}
  #compass .rose{width:34px;height:34px;border-radius:50%;position:relative;background:rgba(255,255,255,.05);border:1px solid rgba(255,255,255,.08)}
  #compass .needle{position:absolute;left:50%;top:50%;width:2px;height:70%;background:var(--gold);transform-origin:50% 85%;border-radius:2px;box-shadow:0 0 12px var(--gold2)}
  #compass .txt{font-size:12px;color:var(--muted);min-width:64px;text-align:right}
  #status{flex:1; text-align:center}
  #quick{display:flex; gap:6px; align-items:center;}
  #quick select, #quick button.small{
    appearance:none;border:1px solid rgba(255,255,255,.12);border-radius:10px;background:#1e1e1e;color:#fff;
    font-weight:600;letter-spacing:.2px;font-size:12px;padding:8px 10px;
  }

  /* Bottom controls */
  #controls{
    position:fixed; left:12px; right:12px; bottom:calc(env(safe-area-inset-bottom) + 132px);
    display:flex; gap:8px; z-index:3; background:var(--glass); border:1px solid rgba(255,255,255,.08);
    padding:10px; border-radius:12px; backdrop-filter:saturate(140%) blur(6px); box-shadow:0 8px 24px rgba(0,0,0,.45);
  }
  #controls button{
    appearance:none;border:0;border-radius:10px;padding:10px 12px;background:#1e1e1e;color:#fff;
    font-weight:600;letter-spacing:.2px
  }
  #controls button.primary{background:#2b5cff}
  #controls button:disabled{opacity:.45}

  /* Brand */
  #brand{position:fixed;left:16px;bottom:calc(env(safe-area-inset-bottom) + 100px);color:#c9c9c9;font-size:11px;opacity:.85;z-index:3;text-shadow:0 1px 10px rgba(0,0,0,.6)}

  /* Debug (collapsible) */
  #debugWrap{position:fixed; left:0; right:0; bottom:0; z-index:2; background:rgba(0,0,0,.84); border-top:1px solid rgba(255,255,255,.06)}
  #debugBar{display:flex; align-items:center; justify-content:space-between; padding:6px 10px; color:#8cf; font:12px/1.25 ui-monospace,Menlo,Consolas,monospace}
  #debug{max-height:0; overflow:auto; margin:0; padding:0 10px 8px 10px; color:#8cf; font:12px/1.25 ui-monospace,Menlo,Consolas,monospace; white-space:pre; transition:max-height .25s ease}
  #debug.open{max-height:120px}
  #toggleDbg{background:transparent;border:0;color:#8cf;font-weight:700}
</style>
</head>
<body>
  <video id="vid" playsinline autoplay muted></video>
  <canvas id="cv"></canvas>

  <div id="topbar">
    <div id="compass" class="pill">
      <div class="rose"><div class="needle" id="needle"></div></div>
      <div class="txt" id="hdgTxt">H: —°</div>
    </div>
    <div id="status" class="pill">Ready</div>
    <div id="quick" class="pill">
      <select id="lens">
        <option value="65">Wide</option>
        <option value="120">Ultra-wide</option>
        <option value="34">2× / Tele</option>
      </select>
      <button id="bLevel" class="small">Level Horizon</button>
      <label style="display:flex;align-items:center;gap:6px;font-weight:600;color:var(--muted);">
        <input type="checkbox" id="chkRefrac" checked /> Refraction
      </label>
    </div>
  </div>

  <div id="brand">o4-mini-high • made with GPT-5</div>

  <div id="controls">
    <button id="bCam" class="primary">Start Camera</button>
    <button id="bGeo" disabled>Get Location</button>
    <button id="bGyro" disabled>Enable Motion</button>
    <button id="bAR" disabled>Start AR</button>
    <button id="bCopy">Copy Logs</button>
  </div>

  <div id="debugWrap">
    <div id="debugBar">
      <strong>Debug</strong>
      <button id="toggleDbg">▲</button>
    </div>
    <pre id="debug">[ready]
</pre>
  </div>

<script>
/* ---------- DOM & logging ---------- */
const $ = id => document.getElementById(id);
const vid=$('vid'), cv=$('cv'), ctx=cv.getContext('2d');
const statusEl=$('status'), dbg=$('debug'), toggleDbg=$('toggleDbg');
const needle=$('needle'), hdgTxt=$('hdgTxt');
const selLens=$('lens'), bLevel=$('bLevel'), chkRefrac=$('chkRefrac');
const log=(...a)=>{ dbg.textContent+=a.join(' ')+'\n'; dbg.scrollTop=dbg.scrollHeight; };

/* ---------- State ---------- */
let stream;
let lat=null, lng=null;
let rawH=0, rawP=0, rawR=0;
let smoothH=0, smoothP=0, smoothR=0;
const SMOOTH=0.12;

let HFOV=65;  // set by lens select
let vFOV=45;  // computed from aspect at runtime

let path=[];    // full 24h [{t, az, alt, v:[Ex,N,Up]}] (alt adjusted for refraction at build time)
let raf=null, arActive=false;

let pitchZero=0;  // user-set baseline for horizon (via Level Horizon)

/* ---------- Utils ---------- */
const rad2deg=r=>r*180/Math.PI, deg2rad=d=>d*Math.PI/180;
function computeVFOV(){
  const w=cv.width||innerWidth, h=cv.height||innerHeight;
  vFOV = 2*Math.atan(Math.tan(deg2rad(HFOV/2))*(h/w))*180/Math.PI;
}
function enuFromAzAlt(azDegFromNorthCW, altDeg){
  const az = deg2rad(azDegFromNorthCW);
  const alt= deg2rad(altDeg);
  const ca=Math.cos(alt), sa=Math.sin(alt);
  const sAz=Math.sin(az), cAz=Math.cos(az);
  // ENU: [East, North, Up]
  return [ ca*sAz, ca*cAz, sa ];
}
function unwrap(seq){
  if(!seq.length) return [];
  const out=[seq[0]];
  for(let i=1;i<seq.length;i++){
    let a=seq[i], p=out[i-1];
    while(a-p>180) a-=360;
    while(a-p<-180) a+=360;
    out.push(a);
  }
  return out;
}
function clamp(v,min,max){ return Math.max(min, Math.min(max,v)); }
function refractLift(altDeg, use){
  if(!use) return 0;
  if (altDeg >= 10) return 0;
  if (altDeg <= 5)  return 0.833; // classic ~34' + sun radius approx
  return 0.833 * (1 - (altDeg-5)/5);
}

/* ---------- Camera basis from yaw/pitch/roll ---------- */
/* World: ENU (x=East, y=North, z=Up). Camera basis we want (right, up, fwd). */
function buildCameraBasis(headingDeg, pitchDeg, rollDeg){
  const yaw = deg2rad(headingDeg);                    // rotation around Up (world z)
  const pitch = deg2rad(pitchDeg - pitchZero);        // tilt up positive
  const roll = deg2rad(rollDeg);                      // roll right positive

  // Forward dir in ENU before roll
  // horizontal forward (unit)
  const hx = Math.sin(yaw), hy = Math.cos(yaw);
  const ch = Math.cos(pitch), sh = Math.sin(pitch);
  const fwd = normalize([ ch*hx, ch*hy, sh ]);

  // Right = normalize(Up × fwd)
  const upWorld = [0,0,1];
  let right = normalize(cross(upWorld, fwd));
  let up    = normalize(cross(fwd, right));

  // Apply roll around forward axis
  if (Math.abs(roll) > 1e-6){
    const cr=Math.cos(roll), sr=Math.sin(roll);
    const r2 = add(scale(right, cr), scale(up, sr));
    const u2 = add(scale(up, cr), scale(right, -sr));
    right = normalize(r2);
    up    = normalize(u2);
  }
  return {right, up, fwd};
}

function dot(a,b){ return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]; }
function cross(a,b){ return [ a[1]*b[2]-a[2]*b[1], a[2]*b[0]-a[0]*b[2], a[0]*b[1]-a[1]*b[0] ]; }
function scale(a,s){ return [a[0]*s, a[1]*s, a[2]*s]; }
function add(a,b){ return [a[0]+b[0], a[1]+b[1], a[2]+b[2]]; }
function norm(a){ return Math.hypot(a[0],a[1],a[2]); }
function normalize(a){ const n=norm(a)||1; return [a[0]/n,a[1]/n,a[2]/n]; }

/* ---------- Projection: ENU -> screen via camera basis ---------- */
function projector(basis, HFOVdeg, vFOVdeg, w, h){
  const tH = Math.tan(deg2rad(HFOVdeg/2));
  const tV = Math.tan(deg2rad(vFOVdeg/2));
  return function project(vWorld){
    const x = dot(vWorld, basis.right);
    const y = dot(vWorld, basis.up);
    const z = dot(vWorld, basis.fwd);
    const inFront = z > 1e-6; // avoid behind-camera flip
    if(!inFront) return {vis:false};
    const xN = (x/(z*tH));   // -1..1
    const yN = (y/(z*tV));   // -1..1
    const px = (xN*0.5 + 0.5)*w;
    const py = (-yN*0.5 + 0.5)*h;
    const vis = xN>=-1.2 && xN<=1.2 && yN>=-1.2 && yN<=1.2;
    return {x:px,y:py,vis,inFront,z};
  };
}

/* ---------- Camera ---------- */
$('bCam').onclick = async () => {
  try{
    statusEl.textContent='Opening camera…';
    stream=await navigator.mediaDevices.getUserMedia({video:{facingMode:'environment'},audio:false});
    vid.srcObject=stream; await vid.play();
    cv.width=vid.videoWidth||innerWidth; cv.height=vid.videoHeight||innerHeight;
    computeVFOV();
    statusEl.textContent=`Camera OK`;
    log('✅ Camera OK', cv.width+'×'+cv.height, 'vFOV≈', vFOV.toFixed(1));
    $('bGeo').disabled=false;
  }catch(e){ statusEl.textContent='Camera error'; log('❌ Camera ERR', e.message); }
};

/* ---------- Geolocation ---------- */
$('bGeo').onclick = () => {
  statusEl.textContent='Getting location…';
  navigator.geolocation.getCurrentPosition(p=>{
    lat=p.coords.latitude; lng=p.coords.longitude;
    statusEl.textContent='Location OK';
    log('✅ Geo OK', lat.toFixed(5), lng.toFixed(5));
    $('bGyro').disabled=false;
  }, e=>{ statusEl.textContent='Location error'; log('❌ Geo ERR', e.message); },
  { enableHighAccuracy:true, timeout:10000 });
};

/* ---------- Orientation ---------- */
function onOri(e){
  const h=(e.webkitCompassHeading!=null)?e.webkitCompassHeading:(360-(e.alpha||0));
  const p=(e.beta||0)-90;  // portrait: ~0 near horizon
  const r=(e.gamma||0);    // roll
  rawH=(h+360)%360; rawP=p; rawR=r;
  smoothH = smoothH*(1-SMOOTH) + rawH*SMOOTH;
  smoothP = smoothP*(1-SMOOTH) + rawP*SMOOTH;
  smoothR = smoothR*(1-SMOOTH) + rawR*SMOOTH;
  hdgTxt.textContent = `H: ${Math.round(smoothH)}°`;
  needle.style.transform = `translate(-50%,-85%) rotate(${smoothH}deg)`;
  statusEl.textContent = `H:${smoothH.toFixed(1)}°  P:${(smoothP-pitchZero).toFixed(1)}°`;
}
$('bGyro').onclick = () => {
  statusEl.textContent='Enabling motion…';
  if(typeof DeviceOrientationEvent?.requestPermission==='function'){
    DeviceOrientationEvent.requestPermission().then(s=>{
      if(s==='granted'){
        addEventListener('deviceorientation', onOri);
        $('bAR').disabled=false; statusEl.textContent='Motion OK'; log('✅ Gyro OK');
      } else { statusEl.textContent='Motion denied'; log('❌ Gyro DENIED'); }
    }).catch(err=>{ statusEl.textContent='Motion error'; log('❌ Gyro ERR', err); });
  } else {
    addEventListener('deviceorientation', onOri);
    $('bAR').disabled=false; statusEl.textContent='Motion OK'; log('✅ Gyro OK (no prompt)');
  }
};

/* ---------- Lens / FOV ---------- */
selLens.onchange = ()=>{
  HFOV = parseFloat(selLens.value);
  computeVFOV();
  log('🔁 Lens FOV set', HFOV, 'vFOV≈', vFOV.toFixed(1));
};

/* ---------- Level Horizon ---------- */
bLevel.onclick = ()=>{
  pitchZero = smoothP;
  log('🧭 Horizon leveled. pitchZero=', pitchZero.toFixed(2));
};

/* ---------- Build full 24h path (precompute ENU vectors) ---------- */
function buildFullPath(){
  path.length=0;
  const now=new Date();
  const start=new Date(now.getFullYear(),now.getMonth(),now.getDate(),0,0,0,0);
  const end=new Date(start); end.setDate(end.getDate()+1);
  const t=new Date(start);
  while(t<=end){
    const pos=SunCalc.getPosition(t,lat,lng);
    const azN = (rad2deg(pos.azimuth)+180+360)%360; // N-CW
    let alt  =  rad2deg(pos.altitude);
    alt += refractLift(alt, chkRefrac.checked);
    path.push({t:new Date(t), az:azN, alt, v: enuFromAzAlt(azN, alt)});
    t.setMinutes(t.getMinutes()+5);
  }
  log('🎯 24h path points:', path.length);
}

/* ---------- Rendering ---------- */
function draw(){
  const w=cv.width, h=cv.height;
  ctx.clearRect(0,0,w,h);

  const basis = buildCameraBasis(smoothH, smoothP, smoothR);
  const project = projector(basis, HFOV, vFOV, w, h);

  /* Horizon: join alt=0 (+refraction) at az = heading ± 90° */
  const altH = refractLift(0, chkRefrac.checked); // little lift so it matches perceived horizon
  const vL = enuFromAzAlt((smoothH-90+360)%360, altH);
  const vR = enuFromAzAlt((smoothH+90)%360, altH);
  const pL = project(vL), pR = project(vR);
  if(pL.vis && pR.vis){
    ctx.save();
    ctx.strokeStyle='rgba(255,255,255,.8)'; ctx.lineWidth=2;
    ctx.beginPath(); ctx.moveTo(pL.x,pL.y); ctx.lineTo(pR.x,pR.y); ctx.stroke();
    // tiny ticks each 5° pitch
    ctx.restore();
  }

  /* Split day/night by altitude at build time */
  const day=[], night=[]; let curD=[], curN=[];
  for(const pt of path){
    if(pt.alt>0){ if(curN.length){ night.push(curN); curN=[]; } curD.push(pt); }
    else{ if(curD.length){ day.push(curD); curD=[]; } curN.push(pt); }
  }
  if(curD.length) day.push(curD); if(curN.length) night.push(curN);

  function strokeSegments(segSets, color, dashed){
    ctx.lineWidth=3; ctx.strokeStyle=color; ctx.setLineDash(dashed?[6,6]:[]);
    for(const seg of segSets){
      ctx.beginPath(); let drawing=false; let prevX=null;
      for(const pt of seg){
        const p = project(pt.v);
        if(!p.vis){ if(drawing){ ctx.stroke(); drawing=false; prevX=null; } continue; }
        if(drawing && prevX!=null && Math.abs(p.x-prevX)>w*0.45){ ctx.stroke(); ctx.beginPath(); drawing=false; }
        if(!drawing){ ctx.moveTo(p.x,p.y); drawing=true; } else { ctx.lineTo(p.x,p.y); }
        prevX=p.x;
      }
      if(drawing) ctx.stroke();
    }
    ctx.setLineDash([]);
  }

  // Night first (under), then day with glow
  strokeSegments(night, 'var(--night)', true);
  ctx.save(); ctx.shadowColor='rgba(255,180,0,.35)'; ctx.shadowBlur=12;
  strokeSegments(day, 'var(--gold)', false);
  ctx.restore();

  /* Hour labels */
  ctx.font='600 12px Inter, system-ui, sans-serif'; ctx.textAlign='center';
  for(const pt of path){
    if(pt.t.getMinutes()!==0) continue;
    const p = project(pt.v); if(!p.vis) continue;
    const label=pt.t.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'});
    ctx.save(); ctx.lineWidth=4; ctx.strokeStyle='var(--edge)'; ctx.fillStyle='var(--ink)';
    ctx.strokeText(label,p.x,p.y-10); ctx.fillText(label,p.x,p.y-10);
    ctx.restore();
    ctx.beginPath(); ctx.arc(p.x,p.y,3,0,Math.PI*2);
    ctx.fillStyle='rgba(255,255,255,.92)'; ctx.fill();
  }

  /* “Now” marker */
  const now = new Date();
  const posNow = SunCalc.getPosition(now, lat, lng);
  const azNow  = (rad2deg(posNow.azimuth)+180+360)%360;
  let  altNow  =  rad2deg(posNow.altitude);
  altNow += refractLift(altNow, chkRefrac.checked);
  const pNow = project( enuFromAzAlt(azNow, altNow) );

  if (pNow.vis){
    ctx.save();
    ctx.shadowColor='rgba(255,200,0,.75)'; ctx.shadowBlur=18;
    ctx.fillStyle='rgba(255,200,0,1)';
    ctx.beginPath(); ctx.arc(pNow.x, pNow.y, 10, 0, Math.PI*2); ctx.fill();
    ctx.restore();
    ctx.fillStyle='var(--ink)'; ctx.font='700 12px Inter'; ctx.textAlign='center';
    ctx.fillText('Now', pNow.x, pNow.y - 16);
  } else {
    // edge arrow
    const x = clamp(pNow.x, 18, w-18), y = clamp(pNow.y, 18, h-18);
    const ang = Math.atan2(pNow.y - y, pNow.x - x);
    ctx.save(); ctx.translate(x,y); ctx.rotate(ang);
    ctx.fillStyle='rgba(255,200,0,1)';
    ctx.beginPath(); ctx.moveTo(-10,-8); ctx.lineTo(14,0); ctx.lineTo(-10,8); ctx.closePath(); ctx.fill();
    ctx.restore();
  }

  raf=requestAnimationFrame(draw);
}

/* ---------- Start AR ---------- */
$('bAR').onclick=()=>{
  if(arActive) return;
  if(!stream || lat==null){ log('❌ Missing prerequisites'); return; }
  cv.width=vid.videoWidth||innerWidth; cv.height=vid.videoHeight||innerHeight;
  computeVFOV();
  buildFullPath();
  pitchZero = smoothP; // baseline; tap Level to refine
  if(raf) cancelAnimationFrame(raf);
  draw();
  arActive=true; $('bAR').disabled=true;
  statusEl.textContent='AR Active'; log('🎉 AR started');
};

/* ---------- Debug ---------- */
toggleDbg.onclick = ()=>{
  const open = dbg.classList.toggle('open');
  toggleDbg.textContent = open ? '▼' : '▲';
};
$('bCopy').onclick=async()=>{ try{ await navigator.clipboard.writeText(dbg.textContent); log('📋 Logs copied'); }catch(e){ log('❌ Copy failed', e.message); } };

/* ---------- Lens init ---------- */
HFOV = parseFloat(selLens.value);

/* ---------- Cleanup ---------- */
addEventListener('beforeunload',()=>{ if(stream) stream.getTracks().forEach(t=>t.stop()); if(raf) cancelAnimationFrame(raf); });
</script>
</body>
</html>
